{"version":3,"sources":["serviceWorker.ts","constants/index.ts","actions/index.ts","containers/BoardsContainer/index.tsx","components/MoveToCardSelect/index.tsx","components/RenameCardInColumn/index.tsx","components/Card/index.tsx","components/CardWrapper/index.tsx","components/Cards/index.tsx","containers/CardsContainer/index.tsx","components/Column/index.tsx","components/Columns/index.tsx","containers/BoardContainer/index.tsx","containers/App/index.tsx","components/Root.tsx","reducers/boards.ts","reducers/columns.ts","reducers/errorMessage.ts","reducers/index.ts","sagas/boards.ts","sagas/index.ts","index.tsx","configureStore.ts","localStorage.ts"],"names":["Boolean","window","location","hostname","match","ITEM_TYPES","moveCard","fromColumnId","toColumnId","id","type","updatedAt","Date","toJSON","setErrorMessage","message","connect","state","boards","addBoard","map","b","key","to","name","onClick","MoveToCardSelect","moveToCardId","onMoveCardClick","props","column","card","onMoveToCardChange","e","target","value","setState","this","moveToColumnsOptions","length","onChange","c","React","PureComponent","RenameCardInColumn","renamingCards","displayEditName","undefined","find","onEditCardClick","cards","currentName","prevState","filter","onRenameCardChange","newName","getTemporaryNameStateValue","onRenameCardClick","renameCard","onCancelRenameCardClick","className","DragSource","beginDrag","monitor","connectDragSource","dragSource","isDragging","onCloseModal","isModalOpened","onDescriptionChange","description","onSaveDescriptionClick","onRemoveCardClick","inPlaceRenameInProgress","toggleInPlaceRename","onNameChange","onSaveNameClick","temporaryName","DeleteCard","boardId","open","onClose","center","classNames","modal","createdAt","toLocaleString","CardWrapper","history","push","changeCardDescription","removeCard","params","cardId","withRouter","Cards","onAddCardNameChange","onAddCardClick","addCard","getMoveToColumnsOptions","columns","placeholder","CardsContainer","columnId","uuidv4","DropTarget","drop","item","getItem","connectDropTarget","dropTarget","isOver","removeColumn","onEditColumnClick","onRenameColumnChange","renamingColumns","onRenameColumnClick","onCancelRenameColumnClick","Columns","onAddColumnNameChange","renameColumn","oldName","onAddColumn","addColumn","cardExists","forEach","errorMessage","xs","sm","md","lg","App","backend","HTML5Backend","exact","path","component","BoardsContainer","BoardContainer","Component","Root","store","action","fromColumn","reducer","combineReducers","onAddBoard","put","watchBoard","takeLatest","rootSaga","all","fork","sagaMiddleware","createSagaMiddleware","middlewares","persistedState","serializedState","localStorage","JSON","parse","err","loadState","createStore","applyMiddleware","subscribe","throttle","stringify","setItem","saveState","getState","run","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d74e92a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const LOCAL_STORAGE_STATE_KEY = 'LOCAL_STORAGE_STATE_KEY';\r\n\r\nconst ADD_BOARD_REQUEST = 'ADD_BOARD_REQUEST';\r\nconst ADD_BOARD_SUCCESS = 'ADD_BOARD_SUCCESS';\r\n\r\nconst ADD_COLUMN = 'ADD_COLUMN';\r\nconst RENAME_COLUMN = 'RENAME_COLUMN';\r\nconst REMOVE_COLUMN = 'REMOVE_COLUMN';\r\n\r\nconst ADD_CARD = 'ADD_CARD';\r\nconst MOVE_CARD = 'MOVE_CARD';\r\nconst RENAME_CARD = 'RENAME_CARD';\r\nconst REMOVE_CARD = 'REMOVE_CARD';\r\nconst CHANGE_CARD_DESCRIPTION = 'CHANGE_CARD_DESCRIPTION';\r\n\r\nconst SET_ERROR_MESSAGE = 'SET_ERROR_MESSAGE';\r\nconst CLEAR_ERROR_MESSAGE = 'CLEAR_ERROR_MESSAGE';\r\n\r\nconst ITEM_TYPES = {\r\n  COLUMN: 'COLUMN',\r\n  CARD: 'CARD',\r\n};\r\n\r\nexport {\r\n  LOCAL_STORAGE_STATE_KEY,\r\n\r\n  ADD_BOARD_REQUEST,\r\n  ADD_BOARD_SUCCESS,\r\n\r\n  ADD_COLUMN,\r\n  RENAME_COLUMN,\r\n  REMOVE_COLUMN,\r\n\r\n  ADD_CARD,\r\n  MOVE_CARD,\r\n  RENAME_CARD,\r\n  REMOVE_CARD,\r\n  CHANGE_CARD_DESCRIPTION,\r\n\r\n  ITEM_TYPES,\r\n\r\n  SET_ERROR_MESSAGE,\r\n  CLEAR_ERROR_MESSAGE,\r\n};\r\n","import {\r\n  ADD_BOARD_REQUEST,\r\n  ADD_CARD,\r\n  ADD_COLUMN,\r\n  CHANGE_CARD_DESCRIPTION,\r\n  MOVE_CARD,\r\n  REMOVE_CARD,\r\n  REMOVE_COLUMN,\r\n  RENAME_CARD,\r\n  RENAME_COLUMN, SET_ERROR_MESSAGE,\r\n} from '../constants';\r\nimport {\r\n  IAddCardAction,\r\n  IAddColumnAction,\r\n  IChangeCardDescription,\r\n  IMoveCardAction,\r\n  IRemoveCardAction,\r\n  IRemoveColumnAction,\r\n  IRenameCardAction,\r\n  IRenameColumnAction\r\n} from '../reducers/columns';\r\nimport uuidv4 from 'uuid/v4';\r\nimport { ISetErrorMessageAction } from '../reducers/errorMessage';\r\n\r\nconst addBoard = () => ({\r\n  type: ADD_BOARD_REQUEST,\r\n});\r\n\r\nconst addColumn = (name: string, boardId: string) => ({\r\n  type: ADD_COLUMN,\r\n  name,\r\n  boardId,\r\n  id: uuidv4(),\r\n} as IAddColumnAction);\r\n\r\nconst renameColumn = (id: string, name: string) => ({\r\n  type: RENAME_COLUMN,\r\n  id,\r\n  name,\r\n} as IRenameColumnAction);\r\n\r\nconst removeColumn = (id: string) => ({\r\n  type: REMOVE_COLUMN,\r\n  id,\r\n} as IRemoveColumnAction);\r\n\r\nconst addCard = (columnId: string, name: string) => ({\r\n  type: ADD_CARD,\r\n  name,\r\n  columnId,\r\n  id: uuidv4(),\r\n  description: '',\r\n  createdAt: new Date().toJSON(),\r\n} as IAddCardAction);\r\n\r\nconst moveCard = (fromColumnId: string, toColumnId: string, id: string) => ({\r\n  type: MOVE_CARD,\r\n  fromColumnId,\r\n  toColumnId,\r\n  id,\r\n  updatedAt: new Date().toJSON(),\r\n} as IMoveCardAction);\r\n\r\nconst renameCard = (columnId: string, id: string, name: string) => ({\r\n  type: RENAME_CARD,\r\n  id,\r\n  name,\r\n  columnId,\r\n  updatedAt: new Date().toJSON(),\r\n} as IRenameCardAction);\r\n\r\nconst removeCard = (columnId: string, id: string) => ({\r\n  type: REMOVE_CARD,\r\n  columnId,\r\n  id,\r\n} as IRemoveCardAction);\r\n\r\nconst changeCardDescription = (columnId: string, id: string, description: string) => ({\r\n  type: CHANGE_CARD_DESCRIPTION,\r\n  columnId,\r\n  id,\r\n  description,\r\n  updatedAt: new Date().toJSON(),\r\n} as IChangeCardDescription);\r\n\r\nconst setErrorMessage = (message: string) => ({\r\n  type: SET_ERROR_MESSAGE,\r\n  message,\r\n} as ISetErrorMessageAction);\r\n\r\nexport {\r\n  addBoard,\r\n  addColumn,\r\n  renameColumn,\r\n  removeColumn,\r\n  addCard,\r\n  moveCard,\r\n  renameCard,\r\n  removeCard,\r\n  changeCardDescription,\r\n  setErrorMessage,\r\n};\r\n","import React from 'react';\r\nimport { Board as BoardItem } from '../../reducers/boards';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { RootState } from '../../reducers';\r\nimport {\r\n  addBoard,\r\n} from '../../actions';\r\n\r\ninterface IProps {\r\n  boards: BoardItem[];\r\n\r\n  addBoard(): void;\r\n}\r\n\r\n// TODO: nav list\r\nconst BoardsContainer = ({boards, addBoard}: IProps) => {\r\n  return (\r\n    <div>\r\n      <h1>Boards</h1>\r\n\r\n      <ul>\r\n        {boards.map(b =>\r\n          <li key={b.id}>\r\n            <Link to={`/boards/${b.id}/cards`}>{b.name}</Link>\r\n          </li>)}\r\n      </ul>\r\n\r\n      <button\r\n        onClick={addBoard}\r\n      >\r\n        Add board\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect((state: RootState) => ({\r\n  boards: state.boards,\r\n}), {\r\n  addBoard,\r\n})(BoardsContainer);\r\n","import React, { SyntheticEvent } from 'react';\r\nimport { Column } from '../../reducers/columns';\r\nimport { Card as CardItem } from '../../reducers/columns';\r\n\r\nexport interface MoveToColumnOption {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\ninterface IProps {\r\n  moveToColumnsOptions: MoveToColumnOption[];\r\n  column: Column;\r\n  card: CardItem;\r\n\r\n  moveCard(fromColumnId: string, toColumnId: string, id: string): void;\r\n}\r\n\r\ninterface IState {\r\n  moveToCardId: string;\r\n}\r\n\r\nclass MoveToCardSelect extends React.PureComponent<IProps, IState> {\r\n  public readonly state: Readonly<IState> = {\r\n    moveToCardId: '',\r\n  };\r\n\r\n  componentDidMount(): void {\r\n    if (this.props.moveToColumnsOptions.length) {\r\n      this.setState({\r\n        moveToCardId: this.props.moveToColumnsOptions[0].id,\r\n      })\r\n    }\r\n  }\r\n\r\n  onMoveCardClick = () => {\r\n    this.props.moveCard(this.props.column.id, this.state.moveToCardId, this.props.card.id);\r\n  };\r\n\r\n  onMoveToCardChange = (e: SyntheticEvent) => {\r\n    const moveToCardId = (e.target as HTMLSelectElement).value;\r\n\r\n    this.setState({\r\n      moveToCardId,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if (!this.props.moveToColumnsOptions.length) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <select\r\n          onChange={this.onMoveToCardChange}\r\n          value={this.state.moveToCardId}\r\n        >\r\n          {this.props.moveToColumnsOptions.map(c =>\r\n            <option key={c.id} value={c.id}>{c.name}</option>\r\n          )}\r\n        </select>\r\n        <button\r\n          onClick={this.onMoveCardClick}\r\n        >\r\n          Move to column\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MoveToCardSelect;\r\n","import React, { PureComponent, SyntheticEvent } from 'react';\r\nimport { Card, Column } from '../../reducers/columns';\r\nimport { MdModeEdit, MdCheck, MdCancel } from 'react-icons/md';\r\nimport './index.scss';\r\n\r\ninterface IProps {\r\n  column: Column;\r\n  card: Card;\r\n\r\n  renameCard(columnId: string, id: string, name: string): void;\r\n\r\n  setErrorMessage(message: string): void;\r\n}\r\n\r\ninterface IState {\r\n  name: string;\r\n  renamingCards: {\r\n    id: string;\r\n    name: string;\r\n  }[],\r\n}\r\n\r\nclass RenameCardInColumn extends PureComponent<IProps, IState> {\r\n  public readonly state: Readonly<IState> = {\r\n    name: '',\r\n    renamingCards: [],\r\n  };\r\n\r\n  displayEditName = (id: string): boolean => {\r\n    return this.state.renamingCards.find(c => c.id === id) !== undefined;\r\n  };\r\n\r\n  onEditCardClick = (id: string) => () => {\r\n    const c = this.props.column.cards.find(c => c.id === id);\r\n    if (!c) {\r\n      return;\r\n    }\r\n\r\n    const currentName = c.name;\r\n\r\n    this.setState(prevState => ({\r\n      renamingCards: [\r\n        ...prevState.renamingCards.filter(c => c.id !== id),\r\n        {\r\n          id,\r\n          name: currentName,\r\n        },\r\n      ],\r\n    }));\r\n  };\r\n\r\n  onRenameCardChange = (id: string) => (e: SyntheticEvent) => {\r\n    const newName = (e.target as HTMLInputElement).value;\r\n\r\n    this.setState(prevState => ({\r\n      renamingCards: [\r\n        ...prevState.renamingCards.filter(c => c.id !== id),\r\n        {\r\n          id,\r\n          name: newName,\r\n        },\r\n      ],\r\n    }));\r\n  };\r\n\r\n  getTemporaryNameStateValue = (id: string): string => {\r\n    const column = this.state.renamingCards.find(c => c.id === id);\r\n    if (!column) {\r\n      return '';\r\n    }\r\n    return column.name;\r\n  };\r\n\r\n  onRenameCardClick = (id: string) => () => {\r\n    const c = this.state.renamingCards.find(c => c.id === id);\r\n    if (!c) {\r\n      return;\r\n    }\r\n\r\n    const newName = c.name;\r\n\r\n    if (newName === '') {\r\n      this.props.setErrorMessage('Card name is required.');\r\n      return;\r\n    }\r\n\r\n    this.setState(prevState => ({\r\n      renamingCards: prevState.renamingCards.filter(c => c.id !== id),\r\n    }), () => this.props.renameCard(this.props.column.id, id, newName));\r\n  };\r\n\r\n  onCancelRenameCardClick = (id: string) => () => {\r\n    this.setState(prevState => ({\r\n      renamingCards: prevState.renamingCards.filter(c => c.id !== id),\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const {card} = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <span className='ah-icon' onClick={this.onEditCardClick(card.id)}>\r\n          <MdModeEdit/>\r\n        </span>\r\n\r\n        {this.displayEditName(card.id) && <div>\r\n            <input\r\n                className='rename-card-in-column-input'\r\n                onChange={this.onRenameCardChange(card.id)}\r\n                value={this.getTemporaryNameStateValue(card.id)}\r\n            />\r\n            <span\r\n                onClick={this.onRenameCardClick(card.id)}\r\n                className='ah-icon'\r\n            >\r\n            <MdCheck/>\r\n          </span>\r\n            <span\r\n                onClick={this.onCancelRenameCardClick(card.id)}\r\n                className='ah-icon'\r\n            >\r\n            <MdCancel/>\r\n          </span>\r\n        </div>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RenameCardInColumn;\r\n","import React, { SyntheticEvent } from 'react';\r\nimport { Column } from '../../reducers/columns';\r\nimport Modal from 'react-responsive-modal';\r\nimport { Card as CardItem } from '../../reducers/columns';\r\nimport { DragSource, ConnectDragSource, DragSourceMonitor, DragSourceConnector } from 'react-dnd';\r\nimport './index.scss';\r\nimport { ITEM_TYPES } from '../../constants';\r\nimport MoveToCardSelect, { MoveToColumnOption } from '../MoveToCardSelect';\r\nimport { Link } from 'react-router-dom';\r\nimport RenameCardInColumn from '../RenameCardInColumn';\r\nimport { MdDeleteForever, MdEdit, MdCheck, MdCancel, MdAccessTime, MdUpdate } from 'react-icons/md';\r\n\r\ninterface IProps {\r\n  moveToColumnsOptions: MoveToColumnOption[];\r\n  column: Column;\r\n  card: CardItem;\r\n  isModalOpened: boolean;\r\n  description: string;\r\n  temporaryName: string;\r\n  inPlaceRenameInProgress: boolean;\r\n  connectDragSource: ConnectDragSource;\r\n\r\n  moveCard(fromColumnId: string, toColumnId: string, id: string): void;\r\n\r\n  onRemoveCardClick(): void;\r\n\r\n  onCloseModal(): void;\r\n\r\n  onDescriptionChange(e: SyntheticEvent): void;\r\n\r\n  onNameChange(e: SyntheticEvent): void;\r\n\r\n  onSaveDescriptionClick(): void;\r\n\r\n  onSaveNameClick(): void;\r\n\r\n  setErrorMessage(message: string): void;\r\n\r\n  renameCard(columnId: string, id: string, name: string): void;\r\n\r\n  toggleInPlaceRename(): void;\r\n}\r\n\r\nconst Card: React.FunctionComponent<IProps> =\r\n  ({\r\n     moveToColumnsOptions,\r\n     column,\r\n     card,\r\n     moveCard,\r\n     onCloseModal,\r\n     isModalOpened,\r\n     onDescriptionChange,\r\n     description,\r\n     onSaveDescriptionClick,\r\n     onRemoveCardClick,\r\n     setErrorMessage,\r\n     renameCard,\r\n     inPlaceRenameInProgress,\r\n     toggleInPlaceRename,\r\n     onNameChange,\r\n     onSaveNameClick,\r\n     temporaryName,\r\n\r\n     // These props are injected by React DnD,\r\n     // as defined by your `collect` function above:\r\n     connectDragSource,\r\n   }) => {\r\n\r\n    const DeleteCard = (\r\n      <span\r\n        onClick={onRemoveCardClick}\r\n        className='ah-remove ah-icon'\r\n      >\r\n        <MdDeleteForever/>\r\n      </span>\r\n    );\r\n\r\n    return connectDragSource(<div\r\n      className='ah-card ah-shape'\r\n    >\r\n      <RenameCardInColumn\r\n        column={column}\r\n        card={card}\r\n        renameCard={renameCard}\r\n        setErrorMessage={setErrorMessage}\r\n      />\r\n\r\n      <Link to={`/boards/${column.boardId}/cards/${card.id}`}>{card.name}</Link>\r\n\r\n      <Modal\r\n        open={isModalOpened}\r\n        onClose={onCloseModal}\r\n        center\r\n        classNames={{\r\n          modal: 'ah-modal-container',\r\n        }}\r\n      >\r\n        <h5>Column: {column.name}</h5>\r\n\r\n        <MoveToCardSelect\r\n          moveToColumnsOptions={moveToColumnsOptions}\r\n          column={column}\r\n          card={card}\r\n          moveCard={moveCard}\r\n        />\r\n\r\n        {!inPlaceRenameInProgress &&\r\n        <>\r\n            <h4>\r\n              {card.name}\r\n                <span onClick={toggleInPlaceRename}>\r\n                <MdEdit/>\r\n              </span>\r\n            </h4>\r\n        </>}\r\n\r\n        {inPlaceRenameInProgress &&\r\n        <>\r\n            <input className='ah-in-place-rename-input' type=\"text\" onChange={onNameChange} value={temporaryName}/>\r\n            <span className='ah-icon' onClick={onSaveNameClick}><MdCheck/></span>\r\n            <span className='ah-icon' onClick={toggleInPlaceRename}><MdCancel/></span>\r\n        </>}\r\n\r\n        <div>\r\n          <textarea className='ah-card-description' onChange={onDescriptionChange} value={description}/>\r\n          <button className='ah-card-save' onClick={onSaveDescriptionClick}>Save</button>\r\n        </div>\r\n\r\n        <div className='ah-time'>\r\n          <div>\r\n            <MdAccessTime/>\r\n            {new Date(card.createdAt).toLocaleString()}\r\n          </div>\r\n          <div>\r\n            <MdUpdate/>\r\n            {new Date(card.updatedAt).toLocaleString()}\r\n          </div>\r\n        </div>\r\n\r\n        {DeleteCard}\r\n\r\n      </Modal>\r\n\r\n      {DeleteCard}\r\n    </div>);\r\n  };\r\n\r\n/**\r\n * Specifies the drag source contract.\r\n * Only `beginDrag` function is required.\r\n */\r\nconst cardSource = {\r\n  beginDrag(props: IProps) {\r\n    // Return the data describing the dragged item\r\n    const {card, column} = props;\r\n    return {\r\n      card,\r\n      column\r\n    };\r\n  },\r\n};\r\n\r\n/**\r\n * Specifies which props to inject into your component.\r\n */\r\nfunction collect(connect: DragSourceConnector, monitor: DragSourceMonitor) {\r\n  return {\r\n    // Call this function inside render()\r\n    // to let React DnD handle the drag events:\r\n    connectDragSource: connect.dragSource(),\r\n    // You can ask the monitor about the current drag state:\r\n    isDragging: monitor.isDragging(),\r\n  }\r\n}\r\n\r\nexport default DragSource(ITEM_TYPES.CARD, cardSource, collect)(Card);\r\n","import React, { SyntheticEvent } from 'react';\r\nimport { Column } from '../../reducers/columns';\r\nimport { Card as CardItem } from '../../reducers/columns';\r\nimport Card from '../Card';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { MoveToColumnOption } from '../MoveToCardSelect';\r\n\r\ninterface RouteParams {\r\n  cardId?: string;\r\n}\r\n\r\ninterface IProps extends RouteComponentProps<RouteParams> {\r\n  moveToColumnsOptions: MoveToColumnOption[];\r\n  column: Column;\r\n  card: CardItem;\r\n\r\n  moveCard(fromColumnId: string, toColumnId: string, id: string): void;\r\n\r\n  removeCard(columnId: string, id: string): void;\r\n\r\n  changeCardDescription(columnId: string, id: string, description: string): void;\r\n\r\n  setErrorMessage(message: string): void;\r\n\r\n  renameCard(columnId: string, id: string, name: string): void;\r\n}\r\n\r\ninterface IState {\r\n  description: string;\r\n  name: string;\r\n  inPlaceRenameInProgress: boolean;\r\n}\r\n\r\nclass CardWrapper extends React.PureComponent<IProps, IState> {\r\n  public readonly state: Readonly<IState> = {\r\n    description: '',\r\n    name: '',\r\n    inPlaceRenameInProgress: false,\r\n  };\r\n\r\n  componentDidMount(): void {\r\n    this.setState({\r\n      description: this.props.card.description,\r\n      name: this.props.card.name,\r\n    });\r\n  }\r\n\r\n  onCloseModal = () => {\r\n    this.props.history.push(`/boards/${this.props.column.boardId}/cards`)\r\n  };\r\n\r\n  onDescriptionChange = (e: SyntheticEvent) => {\r\n    const target = e.target as HTMLTextAreaElement;\r\n    this.setState({\r\n      description: target.value,\r\n    });\r\n  };\r\n\r\n  onNameChange = (e: SyntheticEvent) => {\r\n    const target = e.target as HTMLInputElement;\r\n    this.setState({\r\n      name: target.value,\r\n    });\r\n  };\r\n\r\n  toggleInPlaceRename = () => {\r\n    this.setState(prevState => ({\r\n      inPlaceRenameInProgress: !prevState.inPlaceRenameInProgress,\r\n    }));\r\n  };\r\n\r\n  onSaveDescriptionClick = () => {\r\n    this.props.changeCardDescription(this.props.column.id, this.props.card.id, this.state.description);\r\n  };\r\n\r\n  onSaveNameClick = () => {\r\n    this.setState({\r\n      inPlaceRenameInProgress: false,\r\n    }, () => this.props.renameCard(this.props.column.id, this.props.card.id, this.state.name));\r\n  };\r\n\r\n  onRemoveCardClick = () => {\r\n    this.props.removeCard(this.props.column.id, this.props.card.id);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Card\r\n        isModalOpened={this.props.match.params.cardId === this.props.card.id}\r\n        moveToColumnsOptions={this.props.moveToColumnsOptions}\r\n        column={this.props.column}\r\n        card={this.props.card}\r\n        moveCard={this.props.moveCard}\r\n        onRemoveCardClick={this.onRemoveCardClick}\r\n        onCloseModal={this.onCloseModal}\r\n        onDescriptionChange={this.onDescriptionChange}\r\n        description={this.state.description}\r\n        onSaveDescriptionClick={this.onSaveDescriptionClick}\r\n        renameCard={this.props.renameCard}\r\n        setErrorMessage={this.props.setErrorMessage}\r\n        onNameChange={this.onNameChange}\r\n        onSaveNameClick={this.onSaveNameClick}\r\n        toggleInPlaceRename={this.toggleInPlaceRename}\r\n        inPlaceRenameInProgress={this.state.inPlaceRenameInProgress}\r\n        temporaryName={this.state.name}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(CardWrapper);\r\n","import React, { SyntheticEvent } from 'react';\r\nimport { Column } from '../../reducers/columns';\r\nimport CardWrapper from '../CardWrapper';\r\nimport { MoveToColumnOption } from '../MoveToCardSelect';\r\nimport './index.scss';\r\nimport { MdNoteAdd } from 'react-icons/md';\r\n\r\ninterface IProps {\r\n  columns: Column[];\r\n  column: Column;\r\n\r\n  addCard(columnId: string, name: string): void;\r\n\r\n  moveCard(fromColumnId: string, toColumnId: string, id: string): void;\r\n\r\n  renameCard(columnId: string, id: string, name: string): void;\r\n\r\n  removeCard(columnId: string, id: string): void;\r\n\r\n  changeCardDescription(columnId: string, id: string, description: string): void;\r\n\r\n  setErrorMessage(message: string): void;\r\n}\r\n\r\ninterface IState {\r\n  name: string;\r\n}\r\n\r\n// TODO: escape/enter onkeyup\r\nclass Cards extends React.PureComponent<IProps> {\r\n  public readonly state: Readonly<IState> = {\r\n    name: '',\r\n  };\r\n\r\n  onAddCardNameChange = (e: SyntheticEvent) => {\r\n    const name = (e.target as HTMLInputElement).value;\r\n\r\n    this.setState({\r\n      name,\r\n    });\r\n  };\r\n\r\n  onAddCardClick = () => {\r\n    const newName = this.state.name;\r\n\r\n    if (newName === '') {\r\n      this.props.setErrorMessage('Card name is required.');\r\n      return;\r\n    }\r\n\r\n    this.props.addCard(this.props.column.id, newName);\r\n\r\n    this.setState({\r\n      name: '',\r\n    });\r\n  };\r\n\r\n  getMoveToColumnsOptions = () => {\r\n    return this.props.columns\r\n      .filter(c => c.id !== this.props.column.id && c.boardId === this.props.column.boardId)\r\n      .map(c => ({\r\n        id: c.id,\r\n        name: c.name,\r\n      } as MoveToColumnOption))\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.column.cards.map(card =>\r\n          <CardWrapper\r\n            key={card.id}\r\n            card={card}\r\n            moveToColumnsOptions={this.getMoveToColumnsOptions()}\r\n            column={this.props.column}\r\n            moveCard={this.props.moveCard}\r\n            removeCard={this.props.removeCard}\r\n            changeCardDescription={this.props.changeCardDescription}\r\n            setErrorMessage={this.props.setErrorMessage}\r\n            renameCard={this.props.renameCard}\r\n          />)}\r\n\r\n        <div className='ah-add-card-wrapper'>\r\n          <input\r\n            onChange={this.onAddCardNameChange}\r\n            value={this.state.name}\r\n            placeholder='New card name'\r\n          />\r\n          <span\r\n            onClick={this.onAddCardClick}\r\n            className='ah-icon'\r\n          >\r\n            <MdNoteAdd/>\r\n          </span>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Cards;\r\n","import Cards from '../../components/Cards';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  addCard,\r\n  moveCard,\r\n  removeCard,\r\n  renameCard,\r\n  changeCardDescription,\r\n  setErrorMessage,\r\n} from '../../actions';\r\nimport { RootState } from '../../reducers';\r\n\r\nconst CardsContainer = connect((state: RootState) => ({\r\n  columns: state.columns,\r\n}), {\r\n  addCard,\r\n  moveCard,\r\n  removeCard,\r\n  renameCard,\r\n  changeCardDescription,\r\n  setErrorMessage,\r\n})(Cards);\r\n\r\nexport default CardsContainer;\r\n","import React, { SyntheticEvent } from 'react';\r\nimport { Column as ColumnItem } from '../../reducers/columns';\r\nimport CardsContainer from '../../containers/CardsContainer';\r\nimport { DropTargetMonitor, DropTarget, ConnectDropTarget, DropTargetConnector } from 'react-dnd';\r\nimport { ITEM_TYPES } from '../../constants';\r\nimport './index.scss';\r\nimport { MdModeEdit, MdDeleteForever, MdCheck, MdCancel } from 'react-icons/md';\r\nimport { RenamingColumn } from '../Columns';\r\n\r\ninterface IProps {\r\n  column: ColumnItem;\r\n  isOver: boolean;\r\n  connectDropTarget: ConnectDropTarget;\r\n  renamingColumns: RenamingColumn[];\r\n\r\n  addColumn(name: string, boardId: string): void;\r\n\r\n  renameColumn(id: string, name: string): void;\r\n\r\n  removeColumn(id: string): void;\r\n\r\n  onEditColumnClick(id: string): () => void;\r\n\r\n  onRenameColumnChange(id: string): (e: SyntheticEvent) => void;\r\n\r\n  getTemporaryNameStateValue(id: string): string;\r\n\r\n  onRenameColumnClick(id: string): () => void;\r\n\r\n  onCancelRenameColumnClick(id: string): () => void;\r\n\r\n  moveCard(fromColumnId: string, toColumnId: string, id: string): void;\r\n}\r\n\r\nconst Column: React.FunctionComponent<IProps> =\r\n  ({\r\n     column,\r\n     removeColumn,\r\n     onEditColumnClick,\r\n     onRenameColumnChange,\r\n     renamingColumns,\r\n     getTemporaryNameStateValue,\r\n     onRenameColumnClick,\r\n     onCancelRenameColumnClick,\r\n     connectDropTarget,\r\n     isOver,\r\n   }) => {\r\n    const displayEditName = renamingColumns.find(c => c.id === column.id) !== undefined;\r\n\r\n    return connectDropTarget(\r\n      <div className={`ah-column ah-shape ${isOver ? 'ah-is-over-column' : ''}`}>\r\n        {!displayEditName &&\r\n        <div className='ah-column-name-wrapper'>\r\n          {column.name}\r\n          <span className='ah-icon' onClick={onEditColumnClick(column.id)}>\r\n            <MdModeEdit/>\r\n          </span>\r\n        </div>}\r\n\r\n        {displayEditName &&\r\n        <div className='ah-column-name-wrapper'>\r\n          <input\r\n              onChange={onRenameColumnChange(column.id)}\r\n              value={getTemporaryNameStateValue(column.id)}\r\n          />\r\n          <span\r\n            onClick={onRenameColumnClick(column.id)}\r\n            className='ah-icon'\r\n          >\r\n            <MdCheck/>\r\n          </span>\r\n          <span\r\n              onClick={onCancelRenameColumnClick(column.id)}\r\n              className='ah-icon'\r\n          >\r\n            <MdCancel/>\r\n          </span>\r\n        </div>}\r\n\r\n        <span\r\n          onClick={() => removeColumn(column.id)}\r\n          className='ah-remove ah-icon'\r\n        >\r\n          <MdDeleteForever/>\r\n        </span>\r\n\r\n        <CardsContainer\r\n          column={column}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n/**\r\n * Specifies the drop target contract.\r\n * All methods are optional.\r\n */\r\nconst target = {\r\n  drop(props: IProps, monitor: DropTargetMonitor) {\r\n    // Obtain the dragged item\r\n    const item = monitor.getItem();\r\n\r\n    props.moveCard(item.column.id, props.column.id, item.card.id);\r\n  },\r\n};\r\n\r\n/**\r\n * Specifies which props to inject into your component.\r\n */\r\nfunction collect(connect: DropTargetConnector, monitor: DropTargetMonitor) {\r\n  return {\r\n    // Call this function inside render()\r\n    // to let React DnD handle the drag events:\r\n    connectDropTarget: connect.dropTarget(),\r\n    // You can ask the monitor about the current drag state:\r\n    isOver: monitor.isOver(),\r\n  }\r\n}\r\n\r\nexport default DropTarget(ITEM_TYPES.CARD, target, collect)(Column);\r\n","import React, { SyntheticEvent } from 'react';\r\nimport Column from '../Column';\r\nimport { Column as ColumnItem } from '../../reducers/columns';\r\nimport { Grid, Row, Col } from 'react-flexbox-grid';\r\nimport './index.scss';\r\nimport { Redirect } from 'react-router';\r\n\r\ninterface IProps {\r\n  boardId: string;\r\n  cardId?: string;\r\n  errorMessage: string;\r\n  columns: ColumnItem[];\r\n\r\n  addColumn(name: string, boardId: string): void;\r\n\r\n  renameColumn(id: string, name: string): void;\r\n\r\n  removeColumn(id: string): void;\r\n\r\n  moveCard(fromColumnId: string, toColumnId: string, id: string): void;\r\n\r\n  setErrorMessage(message: string): void;\r\n}\r\n\r\nexport interface RenamingColumn {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\ninterface IState {\r\n  name: string;\r\n  renamingColumns: RenamingColumn[],\r\n}\r\n\r\nclass Columns extends React.PureComponent<IProps, IState> {\r\n  public readonly state: Readonly<IState> = {\r\n    name: '',\r\n    renamingColumns: [],\r\n  };\r\n\r\n  onAddColumnNameChange = (e: SyntheticEvent) => {\r\n    const name = (e.target as HTMLInputElement).value;\r\n\r\n    this.setState({\r\n      name,\r\n    });\r\n  };\r\n\r\n  onRenameColumnChange = (id: string) => (e: SyntheticEvent) => {\r\n    const newName = (e.target as HTMLInputElement).value;\r\n\r\n    this.setState(prevState => ({\r\n      renamingColumns: [\r\n        ...prevState.renamingColumns.filter(c => c.id !== id),\r\n        {\r\n          id,\r\n          name: newName,\r\n        },\r\n      ],\r\n    }));\r\n  };\r\n\r\n  onRenameColumnClick = (id: string) => () => {\r\n    const c = this.state.renamingColumns.find(c => c.id === id);\r\n    if (!c) {\r\n      return;\r\n    }\r\n\r\n    const newName = c.name;\r\n\r\n    if (newName === '') {\r\n      this.props.setErrorMessage('Column name is required.');\r\n      return;\r\n    }\r\n\r\n    this.setState(prevState => ({\r\n      renamingColumns: prevState.renamingColumns.filter(c => c.id !== id),\r\n    }), () => this.props.renameColumn(id, newName));\r\n  };\r\n\r\n  onEditColumnClick = (id: string) => () => {\r\n    const c = this.props.columns.find(c => c.id === id);\r\n    if (!c) {\r\n      return;\r\n    }\r\n\r\n    const oldName = c.name;\r\n\r\n    this.setState(prevState => ({\r\n      renamingColumns: [\r\n        ...prevState.renamingColumns.filter(c => c.id !== id),\r\n        {\r\n          id,\r\n          name: oldName,\r\n        },\r\n      ],\r\n    }));\r\n  };\r\n\r\n  onCancelRenameColumnClick = (id: string) => () => {\r\n    this.setState(prevState => ({\r\n      renamingColumns: prevState.renamingColumns.filter(c => c.id !== id),\r\n    }));\r\n  };\r\n\r\n  onAddColumn = () => {\r\n    const {name} = this.state;\r\n    if (name === '') {\r\n      this.props.setErrorMessage('Column name is required.');\r\n      return;\r\n    }\r\n\r\n    this.props.addColumn(name, this.props.boardId);\r\n\r\n    this.setState({\r\n      name: '',\r\n    });\r\n  };\r\n\r\n  getTemporaryNameStateValue = (id: string): string => {\r\n    const column = this.state.renamingColumns.find(c => c.id === id);\r\n    if (!column) {\r\n      return '';\r\n    }\r\n    return column.name;\r\n  };\r\n\r\n  cardExists = (): boolean => {\r\n    let cardExists = false;\r\n    const { columns, cardId } = this.props;\r\n    if (!cardId) {\r\n      return true;\r\n\r\n    }\r\n    columns.forEach(column => {\r\n      const card = column.cards.find(c => c.id === cardId);\r\n      if (card) {\r\n        cardExists = true;\r\n      }\r\n    });\r\n\r\n    return cardExists;\r\n  };\r\n\r\n  render() {\r\n    if (!this.cardExists()) {\r\n      return <Redirect to={`/boards/${this.props.boardId}/cards`} />\r\n    }\r\n\r\n    return (\r\n      <Grid className='ah-columns ah-shape'>\r\n        {!!this.props.errorMessage &&\r\n        <div>\r\n          <span className='ah-error-message'>{this.props.errorMessage}</span>\r\n          <button onClick={() => this.props.setErrorMessage('')}>Dismiss</button>\r\n        </div>}\r\n        <Row center={'xs'} className='add-column-wrapper'>\r\n          <Col>\r\n            <input\r\n              onChange={this.onAddColumnNameChange}\r\n              value={this.state.name}\r\n              placeholder='Name'\r\n            />\r\n            <button\r\n              onClick={this.onAddColumn}\r\n            >\r\n              Add column\r\n            </button>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          {this.props.columns.map(column =>\r\n            <Col key={column.id} xs={12} sm={6} md={4} lg={3}>\r\n              <Column\r\n                column={column}\r\n                addColumn={this.props.addColumn}\r\n                renamingColumns={this.state.renamingColumns}\r\n                getTemporaryNameStateValue={this.getTemporaryNameStateValue}\r\n                onCancelRenameColumnClick={this.onCancelRenameColumnClick}\r\n                onEditColumnClick={this.onEditColumnClick}\r\n                onRenameColumnChange={this.onRenameColumnChange}\r\n                onRenameColumnClick={this.onRenameColumnClick}\r\n                removeColumn={this.props.removeColumn}\r\n                renameColumn={this.props.renameColumn}\r\n                moveCard={this.props.moveCard}\r\n              />\r\n            </Col>)}\r\n        </Row>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Columns;\r\n","import React from 'react';\r\nimport Columns from '../../components/Columns';\r\nimport { Column } from '../../reducers/columns';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { connect } from 'react-redux';\r\nimport { RootState } from '../../reducers';\r\nimport { addColumn, moveCard, removeColumn, renameColumn, setErrorMessage } from '../../actions';\r\n\r\ninterface RouteParams {\r\n  boardId: string;\r\n  cardId?: string;\r\n}\r\n\r\ninterface IProps extends RouteComponentProps<RouteParams> {\r\n  columns: Column[];\r\n  errorMessage: string;\r\n\r\n  addColumn(name: string, boardId: string): void;\r\n\r\n  renameColumn(id: string, name: string): void;\r\n\r\n  removeColumn(id: string): void;\r\n\r\n  moveCard(fromColumnId: string, toColumnId: string, id: string): void;\r\n\r\n  setErrorMessage(message: string): void;\r\n}\r\n\r\nconst BoardContainer: React.FunctionComponent<IProps> =\r\n  ({\r\n     columns,\r\n     addColumn,\r\n     renameColumn,\r\n     removeColumn,\r\n     moveCard,\r\n     match,\r\n     errorMessage,\r\n     setErrorMessage,\r\n   }) => (\r\n    <Columns\r\n      boardId={match.params.boardId}\r\n      columns={columns.filter(c => c.boardId === match.params.boardId)}\r\n      addColumn={addColumn}\r\n      renameColumn={renameColumn}\r\n      removeColumn={removeColumn}\r\n      moveCard={moveCard}\r\n      errorMessage={errorMessage}\r\n      setErrorMessage={setErrorMessage}\r\n      cardId={match.params.cardId}\r\n    />\r\n  );\r\n\r\nexport default connect((state: RootState) => ({\r\n  columns: state.columns,\r\n  errorMessage: state.errorMessage,\r\n}), {\r\n  addColumn,\r\n  renameColumn,\r\n  removeColumn,\r\n  moveCard,\r\n  setErrorMessage,\r\n})(BoardContainer);\r\n","import React, { Component } from 'react';\r\nimport BoardsContainer from '../BoardsContainer';\r\nimport './index.scss';\r\nimport HTML5Backend from 'react-dnd-html5-backend';\r\nimport { Route, Switch } from 'react-router';\r\nimport { DndProvider } from 'react-dnd';\r\nimport BoardContainer from '../BoardContainer';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <DndProvider backend={HTML5Backend}>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={BoardsContainer}/>\r\n          <Route path=\"/boards/:boardId/cards/:cardId?\" component={BoardContainer}/>\r\n          <Route component={() => <h1>404 Not Found</h1>}/>\r\n        </Switch>\r\n      </DndProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport App from '../containers/App';\r\nimport { Store } from 'redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\ninterface IProps {\r\n  store: Store;\r\n}\r\n\r\nconst Root = ({store}: IProps) => (\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App/>\r\n    </BrowserRouter>\r\n  </Provider>\r\n);\r\n\r\nexport default Root;\r\n","import {\r\n  ADD_BOARD_SUCCESS,\r\n} from '../constants';\r\n\r\nexport interface Board {\r\n  id: string\r\n  name: string;\r\n}\r\n\r\nexport interface IAddBoardAction {\r\n  type: typeof ADD_BOARD_SUCCESS,\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\n// TODO: alias\r\nconst boards = (state: Board[] = [], action: IAddBoardAction): Board[] => {\r\n  switch (action.type) {\r\n    case ADD_BOARD_SUCCESS:\r\n      return [\r\n        ...state,\r\n        {\r\n          id: action.id,\r\n          name: action.name,\r\n        }\r\n      ];\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default boards;\r\n","import {\r\n  ADD_CARD,\r\n  ADD_COLUMN,\r\n  CHANGE_CARD_DESCRIPTION,\r\n  MOVE_CARD,\r\n  REMOVE_CARD,\r\n  REMOVE_COLUMN,\r\n  RENAME_CARD,\r\n  RENAME_COLUMN,\r\n} from '../constants';\r\n\r\nexport interface Card {\r\n  id: string\r\n  name: string;\r\n  description: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface Column {\r\n  boardId: string;\r\n  id: string\r\n  name: string;\r\n  cards: Card[],\r\n}\r\n\r\nexport interface IAddColumnAction {\r\n  type: typeof ADD_COLUMN;\r\n  boardId: string;\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\nexport interface IRenameColumnAction {\r\n  type: typeof RENAME_COLUMN;\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\nexport interface IRemoveColumnAction {\r\n  type: typeof REMOVE_COLUMN;\r\n  id: string;\r\n}\r\n\r\nexport interface IAddCardAction {\r\n  type: typeof ADD_CARD;\r\n  id: string;\r\n  columnId: string;\r\n  name: string;\r\n  createdAt: string;\r\n  description: string;\r\n}\r\n\r\nexport interface IRenameCardAction {\r\n  type: typeof RENAME_CARD;\r\n  columnId: string;\r\n  id: string;\r\n  name: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface IMoveCardAction {\r\n  type: typeof MOVE_CARD;\r\n  fromColumnId: string;\r\n  toColumnId: string;\r\n  id: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface IRemoveCardAction {\r\n  type: typeof REMOVE_CARD;\r\n  columnId: string;\r\n  id: string;\r\n}\r\n\r\nexport interface IChangeCardDescription {\r\n  type: typeof CHANGE_CARD_DESCRIPTION;\r\n  columnId: string;\r\n  id: string;\r\n  description: string;\r\n  updatedAt: string;\r\n}\r\n\r\ntype ActionTypes = IAddColumnAction | IRenameColumnAction | IRemoveColumnAction |\r\n  IAddCardAction | IRenameCardAction | IRemoveCardAction | IMoveCardAction | IChangeCardDescription;\r\n\r\nconst columns = (state: Column[] = [], action: ActionTypes): Column[] => {\r\n  switch (action.type) {\r\n    case ADD_COLUMN:\r\n      return [\r\n        ...state,\r\n        {\r\n          boardId: action.boardId,\r\n          id: action.id,\r\n          name: action.name,\r\n          cards: [],\r\n        }\r\n      ];\r\n\r\n    case ADD_CARD:\r\n      return state.map(c => {\r\n        if (c.id !== action.columnId) {\r\n          return c;\r\n        }\r\n\r\n        return {\r\n          ...c,\r\n          cards: [\r\n            ...c.cards,\r\n            {\r\n              id: action.id,\r\n              name: action.name,\r\n              description: action.description,\r\n              createdAt: action.createdAt,\r\n              updatedAt: action.createdAt,\r\n            }\r\n          ],\r\n        }\r\n      });\r\n\r\n    case RENAME_COLUMN:\r\n      return state.map(c => {\r\n        if (c.id !== action.id) {\r\n          return c;\r\n        }\r\n\r\n        return {\r\n          ...c,\r\n          name: action.name,\r\n        }\r\n      });\r\n\r\n    case REMOVE_COLUMN:\r\n      return state.filter(c => c.id !== action.id);\r\n\r\n    case RENAME_CARD:\r\n      return state.map(c => {\r\n        if (c.id !== action.columnId) {\r\n          return c;\r\n        }\r\n\r\n        return {\r\n          ...c,\r\n          cards: c.cards.map(c => {\r\n            if (c.id !== action.id) {\r\n              return c;\r\n            }\r\n\r\n            return {\r\n              ...c,\r\n              name: action.name,\r\n              updatedAt: action.updatedAt,\r\n            };\r\n          }),\r\n        }\r\n      });\r\n\r\n    case CHANGE_CARD_DESCRIPTION:\r\n      return state.map(column => {\r\n        if (column.id !== action.columnId) {\r\n          return column;\r\n        }\r\n\r\n        return {\r\n          ...column,\r\n          cards: column.cards.map(card => {\r\n            if (card.id !== action.id) {\r\n              return card;\r\n            }\r\n\r\n            return {\r\n              ...card,\r\n              description: action.description,\r\n              updatedAt: action.updatedAt,\r\n            };\r\n          }),\r\n        }\r\n      });\r\n\r\n    case MOVE_CARD:\r\n      if (action.fromColumnId === action.toColumnId) {\r\n        return state;\r\n      }\r\n\r\n      const fromColumn = state.find(c => c.id === action.fromColumnId);\r\n      if (!fromColumn) {\r\n        return state;\r\n      }\r\n\r\n      const card = fromColumn.cards.find(c => c.id === action.id);\r\n      if (!card) {\r\n        return state;\r\n      }\r\n\r\n      return state.map(c => {\r\n        if (c.id !== action.toColumnId && c.id !== action.fromColumnId) {\r\n          return c;\r\n        }\r\n\r\n        if (c.id === action.toColumnId) {\r\n          return {\r\n            ...c,\r\n            cards: [\r\n              ...c.cards,\r\n              {\r\n                ...card,\r\n                updatedAt: action.updatedAt,\r\n              },\r\n            ],\r\n          };\r\n        }\r\n\r\n        if (c.id === action.fromColumnId) {\r\n          return {\r\n            ...c,\r\n            cards: c.cards.filter(card => card.id !== action.id)\r\n          }\r\n        }\r\n\r\n        return c;\r\n      });\r\n\r\n    case REMOVE_CARD:\r\n      return state.map(c => {\r\n        if (c.id !== action.columnId) {\r\n          return c;\r\n        }\r\n\r\n        return {\r\n          ...c,\r\n          cards: c.cards.filter(c => c.id !== action.id),\r\n        }\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default columns;\r\n","import {\r\n  ADD_CARD,\r\n  ADD_COLUMN,\r\n  CLEAR_ERROR_MESSAGE,\r\n  RENAME_CARD,\r\n  SET_ERROR_MESSAGE,\r\n} from '../constants';\r\n\r\nexport interface ISetErrorMessageAction {\r\n  type: typeof SET_ERROR_MESSAGE;\r\n  message: string;\r\n}\r\n\r\nexport interface IClearErrorMessageAction {\r\n  type: typeof CLEAR_ERROR_MESSAGE;\r\n  message: string;\r\n}\r\n\r\ntype ActionTypes = ISetErrorMessageAction | IClearErrorMessageAction |\r\n  { type: typeof ADD_COLUMN } | { type: typeof ADD_CARD } | { type: typeof RENAME_CARD };\r\n\r\nconst errorMessage = (state = '', action: ActionTypes): string => {\r\n  switch (action.type) {\r\n    case SET_ERROR_MESSAGE:\r\n      return action.message;\r\n\r\n    case CLEAR_ERROR_MESSAGE:\r\n      return '';\r\n\r\n    case ADD_COLUMN:\r\n    case ADD_CARD:\r\n    case RENAME_CARD:\r\n      return '';\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default errorMessage;\r\n","import { combineReducers } from 'redux';\r\nimport boards, { Board } from './boards';\r\nimport columns, { Column } from './columns';\r\nimport errorMessage from './errorMessage';\r\n\r\nexport interface RootState {\r\n  boards: Board[];\r\n  columns: Column[];\r\n  errorMessage: string;\r\n}\r\n\r\nconst reducer = combineReducers<RootState>({\r\n  boards,\r\n  columns,\r\n  errorMessage,\r\n});\r\n\r\nexport default reducer;\r\n","import {\r\n  ADD_BOARD_REQUEST,\r\n  ADD_BOARD_SUCCESS,\r\n} from '../constants';\r\nimport { put, takeLatest } from 'redux-saga/effects';\r\nimport { IAddBoardAction } from '../reducers/boards';\r\nimport uuidv4 from 'uuid/v4';\r\n\r\nconst onAddBoard = function* () {\r\n  const id = uuidv4();\r\n\r\n  yield put<IAddBoardAction>({\r\n    type: ADD_BOARD_SUCCESS,\r\n    id,\r\n    name: id,\r\n  });\r\n};\r\n\r\nconst watchBoard = function* () {\r\n  yield takeLatest<IAddBoardAction>(ADD_BOARD_REQUEST, onAddBoard);\r\n};\r\n\r\nexport {\r\n  watchBoard,\r\n};\r\n","import { watchBoard } from './boards';\r\nimport { fork, all } from 'redux-saga/effects';\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    fork(watchBoard),\r\n  ]);\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Root from './components/Root';\r\nimport configureStore from './configureStore';\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(<Root store={store}/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { createStore, applyMiddleware, Store, Middleware } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport reducer, { RootState } from './reducers/index';\r\nimport rootSaga from './sagas';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { loadState, saveState } from './localStorage';\r\nimport throttle from 'lodash/throttle';\r\n\r\n// const mockState: RootState = {\r\n//   boards: [\r\n//     {\r\n//       id: '1',\r\n//       name: 'Default board',\r\n//     }\r\n//   ],\r\n//   columns: [\r\n//     {\r\n//       boardId: '1',\r\n//       id: '1',\r\n//       name: 'aaa',\r\n//       cards: [\r\n//         {\r\n//           id: '1',\r\n//           name: 'a1',\r\n//           description: 'a1 description goes here',\r\n//           createdAt: new Date().toJSON(),\r\n//           updatedAt: new Date().toJSON(),\r\n//         },\r\n//         {\r\n//           id: '2',\r\n//           name: 'a2',\r\n//           description: 'a2 description goes here',\r\n//           createdAt: new Date().toJSON(),\r\n//           updatedAt: new Date().toJSON(),\r\n//         },\r\n//         {\r\n//           id: '3',\r\n//           name: 'a3',\r\n//           description: 'a3 description goes here',\r\n//           createdAt: new Date().toJSON(),\r\n//           updatedAt: new Date().toJSON(),\r\n//         },\r\n//       ],\r\n//     },\r\n//     {\r\n//       boardId: '1',\r\n//       id: '2',\r\n//       name: 'bbb',\r\n//       cards: [\r\n//         {\r\n//           id: '4',\r\n//           name: 'b1',\r\n//           description: 'b1 description goes here',\r\n//           createdAt: new Date().toJSON(),\r\n//           updatedAt: new Date().toJSON(),\r\n//         },\r\n//         {\r\n//           id: '5',\r\n//           name: 'b2',\r\n//           description: 'b2 description goes here',\r\n//           createdAt: new Date().toJSON(),\r\n//           updatedAt: new Date().toJSON(),\r\n//         },\r\n//         {\r\n//           id: '6',\r\n//           name: 'b3',\r\n//           description: 'b3 description goes here',\r\n//           createdAt: new Date().toJSON(),\r\n//           updatedAt: new Date().toJSON(),\r\n//         },\r\n//       ],\r\n//     },\r\n//     {\r\n//       boardId: '1',\r\n//       id: '3',\r\n//       name: 'ccc',\r\n//       cards: [\r\n//         {\r\n//           id: '7',\r\n//           name: 'c1',\r\n//           description: 'c1 description goes here',\r\n//           createdAt: new Date().toJSON(),\r\n//           updatedAt: new Date().toJSON(),\r\n//         },\r\n//         {\r\n//           id: '8',\r\n//           name: 'c2',\r\n//           description: 'c2 description goes here',\r\n//           createdAt: new Date().toJSON(),\r\n//           updatedAt: new Date().toJSON(),\r\n//         },\r\n//         {\r\n//           id: '9',\r\n//           name: 'c3',\r\n//           description: 'c3 description goes here',\r\n//           createdAt: new Date().toJSON(),\r\n//           updatedAt: new Date().toJSON(),\r\n//         },\r\n//       ],\r\n//     },\r\n//   ],\r\n//   errorMessage: '',\r\n// };\r\n\r\nconst configureStore = () => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n\r\n  const middlewares: Middleware[] = [sagaMiddleware];\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    middlewares.push(createLogger({\r\n      // diff: true,\r\n    }));\r\n  }\r\n\r\n  let persistedState = loadState();\r\n  // if (!persistedState) {\r\n  //   console.log('mockState');\r\n  //   persistedState = mockState;\r\n  // }\r\n\r\n  const store = createStore(\r\n    reducer,\r\n    persistedState,\r\n    applyMiddleware(...middlewares)\r\n  ) as Store<RootState>;\r\n\r\n  store.subscribe(throttle(() => {\r\n    saveState(store.getState());\r\n  }));\r\n\r\n  sagaMiddleware.run(rootSaga);\r\n\r\n  return store;\r\n};\r\n\r\nexport default configureStore;\r\n","// https://egghead.io/lessons/javascript-redux-persisting-the-state-to-the-local-storage\r\nimport { LOCAL_STORAGE_STATE_KEY } from './constants';\r\nimport { RootState } from './reducers';\r\n\r\nexport const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem(LOCAL_STORAGE_STATE_KEY);\r\n    if (serializedState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const saveState = (state: RootState) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem(LOCAL_STORAGE_STATE_KEY, serializedState);\r\n  } catch {\r\n    // ignore write errors\r\n  }\r\n};\r\n"],"sourceRoot":""}