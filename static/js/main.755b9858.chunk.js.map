{"version":3,"sources":["serviceWorker.ts","constants/index.ts","actions/index.ts","containers/BoardsContainer/index.tsx","components/MoveToCardSelect/index.tsx","components/RenameCardInColumn/index.tsx","components/Card/index.tsx","components/CardWrapper/index.tsx","components/Cards/index.tsx","containers/CardsContainer/index.tsx","components/Column/index.tsx","components/Columns/index.tsx","containers/BoardContainer/index.tsx","containers/App/index.tsx","components/Root.tsx","reducers/boards.ts","reducers/columns.ts","reducers/errorMessage.ts","reducers/index.ts","sagas/boards.ts","sagas/index.ts","index.tsx","configureStore.ts","localStorage.ts"],"names":["Boolean","window","location","hostname","match","ITEM_TYPES","moveCard","fromColumnId","toColumnId","id","type","updatedAt","Date","toJSON","setErrorMessage","message","connect","state","boards","addBoard","map","b","key","to","name","onClick","MoveToCardSelect","moveToCardId","onMoveCardClick","props","column","card","onMoveToCardChange","e","target","value","setState","this","moveToColumnsOptions","length","onChange","c","React","PureComponent","RenameCardInColumn","renamingCards","displayEditName","undefined","find","onEditCardClick","cards","currentName","prevState","filter","onRenameCardChange","newName","getTemporaryNameStateValue","onRenameCardClick","renameCard","onCancelRenameCardClick","className","DragSource","beginDrag","monitor","connectDragSource","dragSource","isDragging","onCloseModal","isModalOpened","onDescriptionChange","description","onSaveDescriptionClick","onRemoveCardClick","inPlaceRenameInProgress","toggleInPlaceRename","onNameChange","onSaveNameClick","temporaryName","DeleteCard","boardId","open","onClose","center","classNames","modal","createdAt","toLocaleString","CardWrapper","history","push","changeCardDescription","removeCard","params","cardId","withRouter","Cards","onAddCardNameChange","onAddCardClick","addCard","getMoveToColumnsOptions","columns","placeholder","CardsContainer","columnId","uuidv4","DropTarget","drop","item","getItem","connectDropTarget","dropTarget","isOver","removeColumn","onEditColumnClick","onRenameColumnChange","renamingColumns","onRenameColumnClick","onCancelRenameColumnClick","Columns","onAddColumnNameChange","renameColumn","oldName","onAddColumn","addColumn","cardExists","forEach","errorMessage","xs","sm","md","lg","App","backend","HTML5Backend","exact","path","component","BoardsContainer","BoardContainer","Component","Root","store","basename","process","action","fromColumn","reducer","combineReducers","onAddBoard","put","watchBoard","takeLatest","rootSaga","all","fork","sagaMiddleware","createSagaMiddleware","middlewares","persistedState","serializedState","localStorage","JSON","parse","err","loadState","createStore","applyMiddleware","subscribe","throttle","stringify","setItem","saveState","getState","run","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.755b9858.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const LOCAL_STORAGE_STATE_KEY = 'LOCAL_STORAGE_STATE_KEY';\n\nconst ADD_BOARD_REQUEST = 'ADD_BOARD_REQUEST';\nconst ADD_BOARD_SUCCESS = 'ADD_BOARD_SUCCESS';\n\nconst ADD_COLUMN = 'ADD_COLUMN';\nconst RENAME_COLUMN = 'RENAME_COLUMN';\nconst REMOVE_COLUMN = 'REMOVE_COLUMN';\n\nconst ADD_CARD = 'ADD_CARD';\nconst MOVE_CARD = 'MOVE_CARD';\nconst RENAME_CARD = 'RENAME_CARD';\nconst REMOVE_CARD = 'REMOVE_CARD';\nconst CHANGE_CARD_DESCRIPTION = 'CHANGE_CARD_DESCRIPTION';\n\nconst SET_ERROR_MESSAGE = 'SET_ERROR_MESSAGE';\nconst CLEAR_ERROR_MESSAGE = 'CLEAR_ERROR_MESSAGE';\n\nconst ITEM_TYPES = {\n  COLUMN: 'COLUMN',\n  CARD: 'CARD',\n};\n\nexport {\n  LOCAL_STORAGE_STATE_KEY,\n\n  ADD_BOARD_REQUEST,\n  ADD_BOARD_SUCCESS,\n\n  ADD_COLUMN,\n  RENAME_COLUMN,\n  REMOVE_COLUMN,\n\n  ADD_CARD,\n  MOVE_CARD,\n  RENAME_CARD,\n  REMOVE_CARD,\n  CHANGE_CARD_DESCRIPTION,\n\n  ITEM_TYPES,\n\n  SET_ERROR_MESSAGE,\n  CLEAR_ERROR_MESSAGE,\n};\n","import {\n  ADD_BOARD_REQUEST,\n  ADD_CARD,\n  ADD_COLUMN,\n  CHANGE_CARD_DESCRIPTION,\n  MOVE_CARD,\n  REMOVE_CARD,\n  REMOVE_COLUMN,\n  RENAME_CARD,\n  RENAME_COLUMN, SET_ERROR_MESSAGE,\n} from '../constants';\nimport {\n  IAddCardAction,\n  IAddColumnAction,\n  IChangeCardDescription,\n  IMoveCardAction,\n  IRemoveCardAction,\n  IRemoveColumnAction,\n  IRenameCardAction,\n  IRenameColumnAction\n} from '../reducers/columns';\nimport uuidv4 from 'uuid/v4';\nimport { ISetErrorMessageAction } from '../reducers/errorMessage';\n\nconst addBoard = () => ({\n  type: ADD_BOARD_REQUEST,\n});\n\nconst addColumn = (name: string, boardId: string) => ({\n  type: ADD_COLUMN,\n  name,\n  boardId,\n  id: uuidv4(),\n} as IAddColumnAction);\n\nconst renameColumn = (id: string, name: string) => ({\n  type: RENAME_COLUMN,\n  id,\n  name,\n} as IRenameColumnAction);\n\nconst removeColumn = (id: string) => ({\n  type: REMOVE_COLUMN,\n  id,\n} as IRemoveColumnAction);\n\nconst addCard = (columnId: string, name: string) => ({\n  type: ADD_CARD,\n  name,\n  columnId,\n  id: uuidv4(),\n  description: '',\n  createdAt: new Date().toJSON(),\n} as IAddCardAction);\n\nconst moveCard = (fromColumnId: string, toColumnId: string, id: string) => ({\n  type: MOVE_CARD,\n  fromColumnId,\n  toColumnId,\n  id,\n  updatedAt: new Date().toJSON(),\n} as IMoveCardAction);\n\nconst renameCard = (columnId: string, id: string, name: string) => ({\n  type: RENAME_CARD,\n  id,\n  name,\n  columnId,\n  updatedAt: new Date().toJSON(),\n} as IRenameCardAction);\n\nconst removeCard = (columnId: string, id: string) => ({\n  type: REMOVE_CARD,\n  columnId,\n  id,\n} as IRemoveCardAction);\n\nconst changeCardDescription = (columnId: string, id: string, description: string) => ({\n  type: CHANGE_CARD_DESCRIPTION,\n  columnId,\n  id,\n  description,\n  updatedAt: new Date().toJSON(),\n} as IChangeCardDescription);\n\nconst setErrorMessage = (message: string) => ({\n  type: SET_ERROR_MESSAGE,\n  message,\n} as ISetErrorMessageAction);\n\nexport {\n  addBoard,\n  addColumn,\n  renameColumn,\n  removeColumn,\n  addCard,\n  moveCard,\n  renameCard,\n  removeCard,\n  changeCardDescription,\n  setErrorMessage,\n};\n","import React from 'react';\nimport { Board as BoardItem } from '../../reducers/boards';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { RootState } from '../../reducers';\nimport {\n  addBoard,\n} from '../../actions';\n\ninterface IProps {\n  boards: BoardItem[];\n\n  addBoard(): void;\n}\n\n// TODO: nav list\nconst BoardsContainer = ({boards, addBoard}: IProps) => {\n  return (\n    <div>\n      <h1>Boards</h1>\n\n      <ul>\n        {boards.map(b =>\n          <li key={b.id}>\n            <Link to={`/boards/${b.id}/cards`}>{b.name}</Link>\n          </li>)}\n      </ul>\n\n      <button\n        onClick={addBoard}\n      >\n        Add board\n      </button>\n    </div>\n  );\n};\n\nexport default connect((state: RootState) => ({\n  boards: state.boards,\n}), {\n  addBoard,\n})(BoardsContainer);\n","import React, { SyntheticEvent } from 'react';\nimport { Column } from '../../reducers/columns';\nimport { Card as CardItem } from '../../reducers/columns';\n\nexport interface MoveToColumnOption {\n  id: string;\n  name: string;\n}\n\ninterface IProps {\n  moveToColumnsOptions: MoveToColumnOption[];\n  column: Column;\n  card: CardItem;\n\n  moveCard(fromColumnId: string, toColumnId: string, id: string): void;\n}\n\ninterface IState {\n  moveToCardId: string;\n}\n\nclass MoveToCardSelect extends React.PureComponent<IProps, IState> {\n  public readonly state: Readonly<IState> = {\n    moveToCardId: '',\n  };\n\n  componentDidMount(): void {\n    if (this.props.moveToColumnsOptions.length) {\n      this.setState({\n        moveToCardId: this.props.moveToColumnsOptions[0].id,\n      })\n    }\n  }\n\n  onMoveCardClick = () => {\n    this.props.moveCard(this.props.column.id, this.state.moveToCardId, this.props.card.id);\n  };\n\n  onMoveToCardChange = (e: SyntheticEvent) => {\n    const moveToCardId = (e.target as HTMLSelectElement).value;\n\n    this.setState({\n      moveToCardId,\n    });\n  };\n\n  render() {\n    if (!this.props.moveToColumnsOptions.length) {\n      return null;\n    }\n\n    return (\n      <div>\n        <select\n          onChange={this.onMoveToCardChange}\n          value={this.state.moveToCardId}\n        >\n          {this.props.moveToColumnsOptions.map(c =>\n            <option key={c.id} value={c.id}>{c.name}</option>\n          )}\n        </select>\n        <button\n          onClick={this.onMoveCardClick}\n        >\n          Move to column\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default MoveToCardSelect;\n","import React, { PureComponent, SyntheticEvent } from 'react';\nimport { Card, Column } from '../../reducers/columns';\nimport { MdModeEdit, MdCheck, MdCancel } from 'react-icons/md';\nimport './index.scss';\n\ninterface IProps {\n  column: Column;\n  card: Card;\n\n  renameCard(columnId: string, id: string, name: string): void;\n\n  setErrorMessage(message: string): void;\n}\n\ninterface IState {\n  name: string;\n  renamingCards: {\n    id: string;\n    name: string;\n  }[],\n}\n\nclass RenameCardInColumn extends PureComponent<IProps, IState> {\n  public readonly state: Readonly<IState> = {\n    name: '',\n    renamingCards: [],\n  };\n\n  displayEditName = (id: string): boolean => {\n    return this.state.renamingCards.find(c => c.id === id) !== undefined;\n  };\n\n  onEditCardClick = (id: string) => () => {\n    const c = this.props.column.cards.find(c => c.id === id);\n    if (!c) {\n      return;\n    }\n\n    const currentName = c.name;\n\n    this.setState(prevState => ({\n      renamingCards: [\n        ...prevState.renamingCards.filter(c => c.id !== id),\n        {\n          id,\n          name: currentName,\n        },\n      ],\n    }));\n  };\n\n  onRenameCardChange = (id: string) => (e: SyntheticEvent) => {\n    const newName = (e.target as HTMLInputElement).value;\n\n    this.setState(prevState => ({\n      renamingCards: [\n        ...prevState.renamingCards.filter(c => c.id !== id),\n        {\n          id,\n          name: newName,\n        },\n      ],\n    }));\n  };\n\n  getTemporaryNameStateValue = (id: string): string => {\n    const column = this.state.renamingCards.find(c => c.id === id);\n    if (!column) {\n      return '';\n    }\n    return column.name;\n  };\n\n  onRenameCardClick = (id: string) => () => {\n    const c = this.state.renamingCards.find(c => c.id === id);\n    if (!c) {\n      return;\n    }\n\n    const newName = c.name;\n\n    if (newName === '') {\n      this.props.setErrorMessage('Card name is required.');\n      return;\n    }\n\n    this.setState(prevState => ({\n      renamingCards: prevState.renamingCards.filter(c => c.id !== id),\n    }), () => this.props.renameCard(this.props.column.id, id, newName));\n  };\n\n  onCancelRenameCardClick = (id: string) => () => {\n    this.setState(prevState => ({\n      renamingCards: prevState.renamingCards.filter(c => c.id !== id),\n    }));\n  };\n\n  render() {\n    const {card} = this.props;\n\n    return (\n      <div>\n        <span className='ah-icon' onClick={this.onEditCardClick(card.id)}>\n          <MdModeEdit/>\n        </span>\n\n        {this.displayEditName(card.id) && <div>\n            <input\n                className='rename-card-in-column-input'\n                onChange={this.onRenameCardChange(card.id)}\n                value={this.getTemporaryNameStateValue(card.id)}\n            />\n            <span\n                onClick={this.onRenameCardClick(card.id)}\n                className='ah-icon'\n            >\n            <MdCheck/>\n          </span>\n            <span\n                onClick={this.onCancelRenameCardClick(card.id)}\n                className='ah-icon'\n            >\n            <MdCancel/>\n          </span>\n        </div>}\n      </div>\n    );\n  }\n}\n\nexport default RenameCardInColumn;\n","import React, { SyntheticEvent } from 'react';\nimport { Column } from '../../reducers/columns';\nimport Modal from 'react-responsive-modal';\nimport { Card as CardItem } from '../../reducers/columns';\nimport { DragSource, ConnectDragSource, DragSourceMonitor, DragSourceConnector } from 'react-dnd';\nimport './index.scss';\nimport { ITEM_TYPES } from '../../constants';\nimport MoveToCardSelect, { MoveToColumnOption } from '../MoveToCardSelect';\nimport { Link } from 'react-router-dom';\nimport RenameCardInColumn from '../RenameCardInColumn';\nimport { MdDeleteForever, MdEdit, MdCheck, MdCancel, MdAccessTime, MdUpdate } from 'react-icons/md';\n\ninterface IProps {\n  moveToColumnsOptions: MoveToColumnOption[];\n  column: Column;\n  card: CardItem;\n  isModalOpened: boolean;\n  description: string;\n  temporaryName: string;\n  inPlaceRenameInProgress: boolean;\n  connectDragSource: ConnectDragSource;\n\n  moveCard(fromColumnId: string, toColumnId: string, id: string): void;\n\n  onRemoveCardClick(): void;\n\n  onCloseModal(): void;\n\n  onDescriptionChange(e: SyntheticEvent): void;\n\n  onNameChange(e: SyntheticEvent): void;\n\n  onSaveDescriptionClick(): void;\n\n  onSaveNameClick(): void;\n\n  setErrorMessage(message: string): void;\n\n  renameCard(columnId: string, id: string, name: string): void;\n\n  toggleInPlaceRename(): void;\n}\n\nconst Card: React.FunctionComponent<IProps> =\n  ({\n     moveToColumnsOptions,\n     column,\n     card,\n     moveCard,\n     onCloseModal,\n     isModalOpened,\n     onDescriptionChange,\n     description,\n     onSaveDescriptionClick,\n     onRemoveCardClick,\n     setErrorMessage,\n     renameCard,\n     inPlaceRenameInProgress,\n     toggleInPlaceRename,\n     onNameChange,\n     onSaveNameClick,\n     temporaryName,\n\n     // These props are injected by React DnD,\n     // as defined by your `collect` function above:\n     connectDragSource,\n   }) => {\n\n    const DeleteCard = (\n      <span\n        onClick={onRemoveCardClick}\n        className='ah-remove ah-icon'\n      >\n        <MdDeleteForever/>\n      </span>\n    );\n\n    return connectDragSource(<div\n      className='ah-card ah-shape'\n    >\n      <RenameCardInColumn\n        column={column}\n        card={card}\n        renameCard={renameCard}\n        setErrorMessage={setErrorMessage}\n      />\n\n      <Link to={`/boards/${column.boardId}/cards/${card.id}`}>{card.name}</Link>\n\n      <Modal\n        open={isModalOpened}\n        onClose={onCloseModal}\n        center\n        classNames={{\n          modal: 'ah-modal-container',\n        }}\n      >\n        <h5>Column: {column.name}</h5>\n\n        <MoveToCardSelect\n          moveToColumnsOptions={moveToColumnsOptions}\n          column={column}\n          card={card}\n          moveCard={moveCard}\n        />\n\n        {!inPlaceRenameInProgress &&\n        <>\n            <h4>\n              {card.name}\n                <span onClick={toggleInPlaceRename}>\n                <MdEdit/>\n              </span>\n            </h4>\n        </>}\n\n        {inPlaceRenameInProgress &&\n        <>\n            <input className='ah-in-place-rename-input' type=\"text\" onChange={onNameChange} value={temporaryName}/>\n            <span className='ah-icon' onClick={onSaveNameClick}><MdCheck/></span>\n            <span className='ah-icon' onClick={toggleInPlaceRename}><MdCancel/></span>\n        </>}\n\n        <div>\n          <textarea className='ah-card-description' onChange={onDescriptionChange} value={description}/>\n          <button className='ah-card-save' onClick={onSaveDescriptionClick}>Save</button>\n        </div>\n\n        <div className='ah-time'>\n          <div>\n            <MdAccessTime/>\n            {new Date(card.createdAt).toLocaleString()}\n          </div>\n          <div>\n            <MdUpdate/>\n            {new Date(card.updatedAt).toLocaleString()}\n          </div>\n        </div>\n\n        {DeleteCard}\n\n      </Modal>\n\n      {DeleteCard}\n    </div>);\n  };\n\n/**\n * Specifies the drag source contract.\n * Only `beginDrag` function is required.\n */\nconst cardSource = {\n  beginDrag(props: IProps) {\n    // Return the data describing the dragged item\n    const {card, column} = props;\n    return {\n      card,\n      column\n    };\n  },\n};\n\n/**\n * Specifies which props to inject into your component.\n */\nfunction collect(connect: DragSourceConnector, monitor: DragSourceMonitor) {\n  return {\n    // Call this function inside render()\n    // to let React DnD handle the drag events:\n    connectDragSource: connect.dragSource(),\n    // You can ask the monitor about the current drag state:\n    isDragging: monitor.isDragging(),\n  }\n}\n\nexport default DragSource(ITEM_TYPES.CARD, cardSource, collect)(Card);\n","import React, { SyntheticEvent } from 'react';\nimport { Column } from '../../reducers/columns';\nimport { Card as CardItem } from '../../reducers/columns';\nimport Card from '../Card';\nimport { RouteComponentProps } from 'react-router';\nimport { withRouter } from 'react-router-dom';\nimport { MoveToColumnOption } from '../MoveToCardSelect';\n\ninterface RouteParams {\n  cardId?: string;\n}\n\ninterface IProps extends RouteComponentProps<RouteParams> {\n  moveToColumnsOptions: MoveToColumnOption[];\n  column: Column;\n  card: CardItem;\n\n  moveCard(fromColumnId: string, toColumnId: string, id: string): void;\n\n  removeCard(columnId: string, id: string): void;\n\n  changeCardDescription(columnId: string, id: string, description: string): void;\n\n  setErrorMessage(message: string): void;\n\n  renameCard(columnId: string, id: string, name: string): void;\n}\n\ninterface IState {\n  description: string;\n  name: string;\n  inPlaceRenameInProgress: boolean;\n}\n\nclass CardWrapper extends React.PureComponent<IProps, IState> {\n  public readonly state: Readonly<IState> = {\n    description: '',\n    name: '',\n    inPlaceRenameInProgress: false,\n  };\n\n  componentDidMount(): void {\n    this.setState({\n      description: this.props.card.description,\n      name: this.props.card.name,\n    });\n  }\n\n  onCloseModal = () => {\n    this.props.history.push(`/boards/${this.props.column.boardId}/cards`)\n  };\n\n  onDescriptionChange = (e: SyntheticEvent) => {\n    const target = e.target as HTMLTextAreaElement;\n    this.setState({\n      description: target.value,\n    });\n  };\n\n  onNameChange = (e: SyntheticEvent) => {\n    const target = e.target as HTMLInputElement;\n    this.setState({\n      name: target.value,\n    });\n  };\n\n  toggleInPlaceRename = () => {\n    this.setState(prevState => ({\n      inPlaceRenameInProgress: !prevState.inPlaceRenameInProgress,\n    }));\n  };\n\n  onSaveDescriptionClick = () => {\n    this.props.changeCardDescription(this.props.column.id, this.props.card.id, this.state.description);\n  };\n\n  onSaveNameClick = () => {\n    this.setState({\n      inPlaceRenameInProgress: false,\n    }, () => this.props.renameCard(this.props.column.id, this.props.card.id, this.state.name));\n  };\n\n  onRemoveCardClick = () => {\n    this.props.removeCard(this.props.column.id, this.props.card.id);\n  };\n\n  render() {\n    return (\n      <Card\n        isModalOpened={this.props.match.params.cardId === this.props.card.id}\n        moveToColumnsOptions={this.props.moveToColumnsOptions}\n        column={this.props.column}\n        card={this.props.card}\n        moveCard={this.props.moveCard}\n        onRemoveCardClick={this.onRemoveCardClick}\n        onCloseModal={this.onCloseModal}\n        onDescriptionChange={this.onDescriptionChange}\n        description={this.state.description}\n        onSaveDescriptionClick={this.onSaveDescriptionClick}\n        renameCard={this.props.renameCard}\n        setErrorMessage={this.props.setErrorMessage}\n        onNameChange={this.onNameChange}\n        onSaveNameClick={this.onSaveNameClick}\n        toggleInPlaceRename={this.toggleInPlaceRename}\n        inPlaceRenameInProgress={this.state.inPlaceRenameInProgress}\n        temporaryName={this.state.name}\n      />\n    )\n  }\n}\n\nexport default withRouter(CardWrapper);\n","import React, { SyntheticEvent } from 'react';\nimport { Column } from '../../reducers/columns';\nimport CardWrapper from '../CardWrapper';\nimport { MoveToColumnOption } from '../MoveToCardSelect';\nimport './index.scss';\nimport { MdNoteAdd } from 'react-icons/md';\n\ninterface IProps {\n  columns: Column[];\n  column: Column;\n\n  addCard(columnId: string, name: string): void;\n\n  moveCard(fromColumnId: string, toColumnId: string, id: string): void;\n\n  renameCard(columnId: string, id: string, name: string): void;\n\n  removeCard(columnId: string, id: string): void;\n\n  changeCardDescription(columnId: string, id: string, description: string): void;\n\n  setErrorMessage(message: string): void;\n}\n\ninterface IState {\n  name: string;\n}\n\n// TODO: escape/enter onkeyup\nclass Cards extends React.PureComponent<IProps> {\n  public readonly state: Readonly<IState> = {\n    name: '',\n  };\n\n  onAddCardNameChange = (e: SyntheticEvent) => {\n    const name = (e.target as HTMLInputElement).value;\n\n    this.setState({\n      name,\n    });\n  };\n\n  onAddCardClick = () => {\n    const newName = this.state.name;\n\n    if (newName === '') {\n      this.props.setErrorMessage('Card name is required.');\n      return;\n    }\n\n    this.props.addCard(this.props.column.id, newName);\n\n    this.setState({\n      name: '',\n    });\n  };\n\n  getMoveToColumnsOptions = () => {\n    return this.props.columns\n      .filter(c => c.id !== this.props.column.id && c.boardId === this.props.column.boardId)\n      .map(c => ({\n        id: c.id,\n        name: c.name,\n      } as MoveToColumnOption))\n  };\n\n  render() {\n    return (\n      <div>\n        {this.props.column.cards.map(card =>\n          <CardWrapper\n            key={card.id}\n            card={card}\n            moveToColumnsOptions={this.getMoveToColumnsOptions()}\n            column={this.props.column}\n            moveCard={this.props.moveCard}\n            removeCard={this.props.removeCard}\n            changeCardDescription={this.props.changeCardDescription}\n            setErrorMessage={this.props.setErrorMessage}\n            renameCard={this.props.renameCard}\n          />)}\n\n        <div className='ah-add-card-wrapper'>\n          <input\n            onChange={this.onAddCardNameChange}\n            value={this.state.name}\n            placeholder='New card name'\n          />\n          <span\n            onClick={this.onAddCardClick}\n            className='ah-icon'\n          >\n            <MdNoteAdd/>\n          </span>\n        </div>\n\n      </div>\n    );\n  }\n}\n\n\nexport default Cards;\n","import Cards from '../../components/Cards';\nimport { connect } from 'react-redux';\nimport {\n  addCard,\n  moveCard,\n  removeCard,\n  renameCard,\n  changeCardDescription,\n  setErrorMessage,\n} from '../../actions';\nimport { RootState } from '../../reducers';\n\nconst CardsContainer = connect((state: RootState) => ({\n  columns: state.columns,\n}), {\n  addCard,\n  moveCard,\n  removeCard,\n  renameCard,\n  changeCardDescription,\n  setErrorMessage,\n})(Cards);\n\nexport default CardsContainer;\n","import React, { SyntheticEvent } from 'react';\nimport { Column as ColumnItem } from '../../reducers/columns';\nimport CardsContainer from '../../containers/CardsContainer';\nimport { DropTargetMonitor, DropTarget, ConnectDropTarget, DropTargetConnector } from 'react-dnd';\nimport { ITEM_TYPES } from '../../constants';\nimport './index.scss';\nimport { MdModeEdit, MdDeleteForever, MdCheck, MdCancel } from 'react-icons/md';\nimport { RenamingColumn } from '../Columns';\n\ninterface IProps {\n  column: ColumnItem;\n  isOver: boolean;\n  connectDropTarget: ConnectDropTarget;\n  renamingColumns: RenamingColumn[];\n\n  addColumn(name: string, boardId: string): void;\n\n  renameColumn(id: string, name: string): void;\n\n  removeColumn(id: string): void;\n\n  onEditColumnClick(id: string): () => void;\n\n  onRenameColumnChange(id: string): (e: SyntheticEvent) => void;\n\n  getTemporaryNameStateValue(id: string): string;\n\n  onRenameColumnClick(id: string): () => void;\n\n  onCancelRenameColumnClick(id: string): () => void;\n\n  moveCard(fromColumnId: string, toColumnId: string, id: string): void;\n}\n\nconst Column: React.FunctionComponent<IProps> =\n  ({\n     column,\n     removeColumn,\n     onEditColumnClick,\n     onRenameColumnChange,\n     renamingColumns,\n     getTemporaryNameStateValue,\n     onRenameColumnClick,\n     onCancelRenameColumnClick,\n     connectDropTarget,\n     isOver,\n   }) => {\n    const displayEditName = renamingColumns.find(c => c.id === column.id) !== undefined;\n\n    return connectDropTarget(\n      <div className={`ah-column ah-shape ${isOver ? 'ah-is-over-column' : ''}`}>\n        {!displayEditName &&\n        <div className='ah-column-name-wrapper'>\n          {column.name}\n          <span className='ah-icon' onClick={onEditColumnClick(column.id)}>\n            <MdModeEdit/>\n          </span>\n        </div>}\n\n        {displayEditName &&\n        <div className='ah-column-name-wrapper'>\n          <input\n              onChange={onRenameColumnChange(column.id)}\n              value={getTemporaryNameStateValue(column.id)}\n          />\n          <span\n            onClick={onRenameColumnClick(column.id)}\n            className='ah-icon'\n          >\n            <MdCheck/>\n          </span>\n          <span\n              onClick={onCancelRenameColumnClick(column.id)}\n              className='ah-icon'\n          >\n            <MdCancel/>\n          </span>\n        </div>}\n\n        <span\n          onClick={() => removeColumn(column.id)}\n          className='ah-remove ah-icon'\n        >\n          <MdDeleteForever/>\n        </span>\n\n        <CardsContainer\n          column={column}\n        />\n      </div>\n    );\n  };\n\n/**\n * Specifies the drop target contract.\n * All methods are optional.\n */\nconst target = {\n  drop(props: IProps, monitor: DropTargetMonitor) {\n    // Obtain the dragged item\n    const item = monitor.getItem();\n\n    props.moveCard(item.column.id, props.column.id, item.card.id);\n  },\n};\n\n/**\n * Specifies which props to inject into your component.\n */\nfunction collect(connect: DropTargetConnector, monitor: DropTargetMonitor) {\n  return {\n    // Call this function inside render()\n    // to let React DnD handle the drag events:\n    connectDropTarget: connect.dropTarget(),\n    // You can ask the monitor about the current drag state:\n    isOver: monitor.isOver(),\n  }\n}\n\nexport default DropTarget(ITEM_TYPES.CARD, target, collect)(Column);\n","import React, { SyntheticEvent } from 'react';\nimport Column from '../Column';\nimport { Column as ColumnItem } from '../../reducers/columns';\nimport { Grid, Row, Col } from 'react-flexbox-grid';\nimport './index.scss';\nimport { Redirect } from 'react-router';\n\ninterface IProps {\n  boardId: string;\n  cardId?: string;\n  errorMessage: string;\n  columns: ColumnItem[];\n\n  addColumn(name: string, boardId: string): void;\n\n  renameColumn(id: string, name: string): void;\n\n  removeColumn(id: string): void;\n\n  moveCard(fromColumnId: string, toColumnId: string, id: string): void;\n\n  setErrorMessage(message: string): void;\n}\n\nexport interface RenamingColumn {\n  id: string;\n  name: string;\n}\n\ninterface IState {\n  name: string;\n  renamingColumns: RenamingColumn[],\n}\n\nclass Columns extends React.PureComponent<IProps, IState> {\n  public readonly state: Readonly<IState> = {\n    name: '',\n    renamingColumns: [],\n  };\n\n  onAddColumnNameChange = (e: SyntheticEvent) => {\n    const name = (e.target as HTMLInputElement).value;\n\n    this.setState({\n      name,\n    });\n  };\n\n  onRenameColumnChange = (id: string) => (e: SyntheticEvent) => {\n    const newName = (e.target as HTMLInputElement).value;\n\n    this.setState(prevState => ({\n      renamingColumns: [\n        ...prevState.renamingColumns.filter(c => c.id !== id),\n        {\n          id,\n          name: newName,\n        },\n      ],\n    }));\n  };\n\n  onRenameColumnClick = (id: string) => () => {\n    const c = this.state.renamingColumns.find(c => c.id === id);\n    if (!c) {\n      return;\n    }\n\n    const newName = c.name;\n\n    if (newName === '') {\n      this.props.setErrorMessage('Column name is required.');\n      return;\n    }\n\n    this.setState(prevState => ({\n      renamingColumns: prevState.renamingColumns.filter(c => c.id !== id),\n    }), () => this.props.renameColumn(id, newName));\n  };\n\n  onEditColumnClick = (id: string) => () => {\n    const c = this.props.columns.find(c => c.id === id);\n    if (!c) {\n      return;\n    }\n\n    const oldName = c.name;\n\n    this.setState(prevState => ({\n      renamingColumns: [\n        ...prevState.renamingColumns.filter(c => c.id !== id),\n        {\n          id,\n          name: oldName,\n        },\n      ],\n    }));\n  };\n\n  onCancelRenameColumnClick = (id: string) => () => {\n    this.setState(prevState => ({\n      renamingColumns: prevState.renamingColumns.filter(c => c.id !== id),\n    }));\n  };\n\n  onAddColumn = () => {\n    const {name} = this.state;\n    if (name === '') {\n      this.props.setErrorMessage('Column name is required.');\n      return;\n    }\n\n    this.props.addColumn(name, this.props.boardId);\n\n    this.setState({\n      name: '',\n    });\n  };\n\n  getTemporaryNameStateValue = (id: string): string => {\n    const column = this.state.renamingColumns.find(c => c.id === id);\n    if (!column) {\n      return '';\n    }\n    return column.name;\n  };\n\n  cardExists = (): boolean => {\n    let cardExists = false;\n    const { columns, cardId } = this.props;\n    if (!cardId) {\n      return true;\n\n    }\n    columns.forEach(column => {\n      const card = column.cards.find(c => c.id === cardId);\n      if (card) {\n        cardExists = true;\n      }\n    });\n\n    return cardExists;\n  };\n\n  render() {\n    if (!this.cardExists()) {\n      return <Redirect to={`/boards/${this.props.boardId}/cards`} />\n    }\n\n    return (\n      <Grid className='ah-columns ah-shape'>\n        {!!this.props.errorMessage &&\n        <div>\n          <span className='ah-error-message'>{this.props.errorMessage}</span>\n          <button onClick={() => this.props.setErrorMessage('')}>Dismiss</button>\n        </div>}\n        <Row center={'xs'} className='add-column-wrapper'>\n          <Col>\n            <input\n              onChange={this.onAddColumnNameChange}\n              value={this.state.name}\n              placeholder='Name'\n            />\n            <button\n              onClick={this.onAddColumn}\n            >\n              Add column\n            </button>\n          </Col>\n        </Row>\n\n        <Row>\n          {this.props.columns.map(column =>\n            <Col key={column.id} xs={12} sm={6} md={4} lg={3}>\n              <Column\n                column={column}\n                addColumn={this.props.addColumn}\n                renamingColumns={this.state.renamingColumns}\n                getTemporaryNameStateValue={this.getTemporaryNameStateValue}\n                onCancelRenameColumnClick={this.onCancelRenameColumnClick}\n                onEditColumnClick={this.onEditColumnClick}\n                onRenameColumnChange={this.onRenameColumnChange}\n                onRenameColumnClick={this.onRenameColumnClick}\n                removeColumn={this.props.removeColumn}\n                renameColumn={this.props.renameColumn}\n                moveCard={this.props.moveCard}\n              />\n            </Col>)}\n        </Row>\n      </Grid>\n    );\n  }\n}\n\n\nexport default Columns;\n","import React from 'react';\nimport Columns from '../../components/Columns';\nimport { Column } from '../../reducers/columns';\nimport { RouteComponentProps } from 'react-router';\nimport { connect } from 'react-redux';\nimport { RootState } from '../../reducers';\nimport { addColumn, moveCard, removeColumn, renameColumn, setErrorMessage } from '../../actions';\n\ninterface RouteParams {\n  boardId: string;\n  cardId?: string;\n}\n\ninterface IProps extends RouteComponentProps<RouteParams> {\n  columns: Column[];\n  errorMessage: string;\n\n  addColumn(name: string, boardId: string): void;\n\n  renameColumn(id: string, name: string): void;\n\n  removeColumn(id: string): void;\n\n  moveCard(fromColumnId: string, toColumnId: string, id: string): void;\n\n  setErrorMessage(message: string): void;\n}\n\nconst BoardContainer: React.FunctionComponent<IProps> =\n  ({\n     columns,\n     addColumn,\n     renameColumn,\n     removeColumn,\n     moveCard,\n     match,\n     errorMessage,\n     setErrorMessage,\n   }) => (\n    <Columns\n      boardId={match.params.boardId}\n      columns={columns.filter(c => c.boardId === match.params.boardId)}\n      addColumn={addColumn}\n      renameColumn={renameColumn}\n      removeColumn={removeColumn}\n      moveCard={moveCard}\n      errorMessage={errorMessage}\n      setErrorMessage={setErrorMessage}\n      cardId={match.params.cardId}\n    />\n  );\n\nexport default connect((state: RootState) => ({\n  columns: state.columns,\n  errorMessage: state.errorMessage,\n}), {\n  addColumn,\n  renameColumn,\n  removeColumn,\n  moveCard,\n  setErrorMessage,\n})(BoardContainer);\n","import React, { Component } from 'react';\nimport BoardsContainer from '../BoardsContainer';\nimport './index.scss';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport { Route, Switch } from 'react-router';\nimport { DndProvider } from 'react-dnd';\nimport BoardContainer from '../BoardContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <DndProvider backend={HTML5Backend}>\n        <Switch>\n          <Route exact path=\"/\" component={BoardsContainer}/>\n          <Route path=\"/boards/:boardId/cards/:cardId?\" component={BoardContainer}/>\n          <Route component={() => <h1>404 Not Found</h1>}/>\n        </Switch>\n      </DndProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport App from '../containers/App';\nimport { Store } from 'redux';\nimport { BrowserRouter } from 'react-router-dom';\n\ninterface IProps {\n  store: Store;\n}\n\nconst Root = ({store}: IProps) => (\n  <Provider store={store}>\n    <BrowserRouter basename={`${process.env.PUBLIC_URL}/`}>\n      <App/>\n    </BrowserRouter>\n  </Provider>\n);\n\nexport default Root;\n","import {\n  ADD_BOARD_SUCCESS,\n} from '../constants';\n\nexport interface Board {\n  id: string\n  name: string;\n}\n\nexport interface IAddBoardAction {\n  type: typeof ADD_BOARD_SUCCESS,\n  id: string;\n  name: string;\n}\n\n// TODO: alias\nconst boards = (state: Board[] = [], action: IAddBoardAction): Board[] => {\n  switch (action.type) {\n    case ADD_BOARD_SUCCESS:\n      return [\n        ...state,\n        {\n          id: action.id,\n          name: action.name,\n        }\n      ];\n\n    default:\n      return state;\n  }\n};\n\nexport default boards;\n","import {\n  ADD_CARD,\n  ADD_COLUMN,\n  CHANGE_CARD_DESCRIPTION,\n  MOVE_CARD,\n  REMOVE_CARD,\n  REMOVE_COLUMN,\n  RENAME_CARD,\n  RENAME_COLUMN,\n} from '../constants';\n\nexport interface Card {\n  id: string\n  name: string;\n  description: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Column {\n  boardId: string;\n  id: string\n  name: string;\n  cards: Card[],\n}\n\nexport interface IAddColumnAction {\n  type: typeof ADD_COLUMN;\n  boardId: string;\n  id: string;\n  name: string;\n}\n\nexport interface IRenameColumnAction {\n  type: typeof RENAME_COLUMN;\n  id: string;\n  name: string;\n}\n\nexport interface IRemoveColumnAction {\n  type: typeof REMOVE_COLUMN;\n  id: string;\n}\n\nexport interface IAddCardAction {\n  type: typeof ADD_CARD;\n  id: string;\n  columnId: string;\n  name: string;\n  createdAt: string;\n  description: string;\n}\n\nexport interface IRenameCardAction {\n  type: typeof RENAME_CARD;\n  columnId: string;\n  id: string;\n  name: string;\n  updatedAt: string;\n}\n\nexport interface IMoveCardAction {\n  type: typeof MOVE_CARD;\n  fromColumnId: string;\n  toColumnId: string;\n  id: string;\n  updatedAt: string;\n}\n\nexport interface IRemoveCardAction {\n  type: typeof REMOVE_CARD;\n  columnId: string;\n  id: string;\n}\n\nexport interface IChangeCardDescription {\n  type: typeof CHANGE_CARD_DESCRIPTION;\n  columnId: string;\n  id: string;\n  description: string;\n  updatedAt: string;\n}\n\ntype ActionTypes = IAddColumnAction | IRenameColumnAction | IRemoveColumnAction |\n  IAddCardAction | IRenameCardAction | IRemoveCardAction | IMoveCardAction | IChangeCardDescription;\n\nconst columns = (state: Column[] = [], action: ActionTypes): Column[] => {\n  switch (action.type) {\n    case ADD_COLUMN:\n      return [\n        ...state,\n        {\n          boardId: action.boardId,\n          id: action.id,\n          name: action.name,\n          cards: [],\n        }\n      ];\n\n    case ADD_CARD:\n      return state.map(c => {\n        if (c.id !== action.columnId) {\n          return c;\n        }\n\n        return {\n          ...c,\n          cards: [\n            ...c.cards,\n            {\n              id: action.id,\n              name: action.name,\n              description: action.description,\n              createdAt: action.createdAt,\n              updatedAt: action.createdAt,\n            }\n          ],\n        }\n      });\n\n    case RENAME_COLUMN:\n      return state.map(c => {\n        if (c.id !== action.id) {\n          return c;\n        }\n\n        return {\n          ...c,\n          name: action.name,\n        }\n      });\n\n    case REMOVE_COLUMN:\n      return state.filter(c => c.id !== action.id);\n\n    case RENAME_CARD:\n      return state.map(c => {\n        if (c.id !== action.columnId) {\n          return c;\n        }\n\n        return {\n          ...c,\n          cards: c.cards.map(c => {\n            if (c.id !== action.id) {\n              return c;\n            }\n\n            return {\n              ...c,\n              name: action.name,\n              updatedAt: action.updatedAt,\n            };\n          }),\n        }\n      });\n\n    case CHANGE_CARD_DESCRIPTION:\n      return state.map(column => {\n        if (column.id !== action.columnId) {\n          return column;\n        }\n\n        return {\n          ...column,\n          cards: column.cards.map(card => {\n            if (card.id !== action.id) {\n              return card;\n            }\n\n            return {\n              ...card,\n              description: action.description,\n              updatedAt: action.updatedAt,\n            };\n          }),\n        }\n      });\n\n    case MOVE_CARD:\n      if (action.fromColumnId === action.toColumnId) {\n        return state;\n      }\n\n      const fromColumn = state.find(c => c.id === action.fromColumnId);\n      if (!fromColumn) {\n        return state;\n      }\n\n      const card = fromColumn.cards.find(c => c.id === action.id);\n      if (!card) {\n        return state;\n      }\n\n      return state.map(c => {\n        if (c.id !== action.toColumnId && c.id !== action.fromColumnId) {\n          return c;\n        }\n\n        if (c.id === action.toColumnId) {\n          return {\n            ...c,\n            cards: [\n              ...c.cards,\n              {\n                ...card,\n                updatedAt: action.updatedAt,\n              },\n            ],\n          };\n        }\n\n        if (c.id === action.fromColumnId) {\n          return {\n            ...c,\n            cards: c.cards.filter(card => card.id !== action.id)\n          }\n        }\n\n        return c;\n      });\n\n    case REMOVE_CARD:\n      return state.map(c => {\n        if (c.id !== action.columnId) {\n          return c;\n        }\n\n        return {\n          ...c,\n          cards: c.cards.filter(c => c.id !== action.id),\n        }\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default columns;\n","import {\n  ADD_CARD,\n  ADD_COLUMN,\n  CLEAR_ERROR_MESSAGE,\n  RENAME_CARD,\n  SET_ERROR_MESSAGE,\n} from '../constants';\n\nexport interface ISetErrorMessageAction {\n  type: typeof SET_ERROR_MESSAGE;\n  message: string;\n}\n\nexport interface IClearErrorMessageAction {\n  type: typeof CLEAR_ERROR_MESSAGE;\n  message: string;\n}\n\ntype ActionTypes = ISetErrorMessageAction | IClearErrorMessageAction |\n  { type: typeof ADD_COLUMN } | { type: typeof ADD_CARD } | { type: typeof RENAME_CARD };\n\nconst errorMessage = (state = '', action: ActionTypes): string => {\n  switch (action.type) {\n    case SET_ERROR_MESSAGE:\n      return action.message;\n\n    case CLEAR_ERROR_MESSAGE:\n      return '';\n\n    case ADD_COLUMN:\n    case ADD_CARD:\n    case RENAME_CARD:\n      return '';\n\n    default:\n      return state;\n  }\n};\n\nexport default errorMessage;\n","import { combineReducers } from 'redux';\nimport boards, { Board } from './boards';\nimport columns, { Column } from './columns';\nimport errorMessage from './errorMessage';\n\nexport interface RootState {\n  boards: Board[];\n  columns: Column[];\n  errorMessage: string;\n}\n\nconst reducer = combineReducers<RootState>({\n  boards,\n  columns,\n  errorMessage,\n});\n\nexport default reducer;\n","import {\n  ADD_BOARD_REQUEST,\n  ADD_BOARD_SUCCESS,\n} from '../constants';\nimport { put, takeLatest } from 'redux-saga/effects';\nimport { IAddBoardAction } from '../reducers/boards';\nimport uuidv4 from 'uuid/v4';\n\n// Actually there're no reasons for using Redux Saga:\n// there're no async actions here\n// made during preparing the boilerplate,\n// decided to leave :)\nconst onAddBoard = function* () {\n  const id = uuidv4();\n\n  yield put<IAddBoardAction>({\n    type: ADD_BOARD_SUCCESS,\n    id,\n    name: id,\n  });\n};\n\nconst watchBoard = function* () {\n  yield takeLatest<IAddBoardAction>(ADD_BOARD_REQUEST, onAddBoard);\n};\n\nexport {\n  watchBoard,\n};\n","import { watchBoard } from './boards';\nimport { fork, all } from 'redux-saga/effects';\n\nexport default function* rootSaga() {\n  yield all([\n    fork(watchBoard),\n  ]);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Root from './components/Root';\nimport configureStore from './configureStore';\n\nconst store = configureStore();\n\nReactDOM.render(<Root store={store}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, Store, Middleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport reducer, { RootState } from './reducers/index';\nimport rootSaga from './sagas';\nimport createSagaMiddleware from 'redux-saga';\nimport { loadState, saveState } from './localStorage';\nimport throttle from 'lodash/throttle';\n\n// const mockState: RootState = {\n//   boards: [\n//     {\n//       id: '1',\n//       name: 'Default board',\n//     }\n//   ],\n//   columns: [\n//     {\n//       boardId: '1',\n//       id: '1',\n//       name: 'aaa',\n//       cards: [\n//         {\n//           id: '1',\n//           name: 'a1',\n//           description: 'a1 description goes here',\n//           createdAt: new Date().toJSON(),\n//           updatedAt: new Date().toJSON(),\n//         },\n//         {\n//           id: '2',\n//           name: 'a2',\n//           description: 'a2 description goes here',\n//           createdAt: new Date().toJSON(),\n//           updatedAt: new Date().toJSON(),\n//         },\n//         {\n//           id: '3',\n//           name: 'a3',\n//           description: 'a3 description goes here',\n//           createdAt: new Date().toJSON(),\n//           updatedAt: new Date().toJSON(),\n//         },\n//       ],\n//     },\n//     {\n//       boardId: '1',\n//       id: '2',\n//       name: 'bbb',\n//       cards: [\n//         {\n//           id: '4',\n//           name: 'b1',\n//           description: 'b1 description goes here',\n//           createdAt: new Date().toJSON(),\n//           updatedAt: new Date().toJSON(),\n//         },\n//         {\n//           id: '5',\n//           name: 'b2',\n//           description: 'b2 description goes here',\n//           createdAt: new Date().toJSON(),\n//           updatedAt: new Date().toJSON(),\n//         },\n//         {\n//           id: '6',\n//           name: 'b3',\n//           description: 'b3 description goes here',\n//           createdAt: new Date().toJSON(),\n//           updatedAt: new Date().toJSON(),\n//         },\n//       ],\n//     },\n//     {\n//       boardId: '1',\n//       id: '3',\n//       name: 'ccc',\n//       cards: [\n//         {\n//           id: '7',\n//           name: 'c1',\n//           description: 'c1 description goes here',\n//           createdAt: new Date().toJSON(),\n//           updatedAt: new Date().toJSON(),\n//         },\n//         {\n//           id: '8',\n//           name: 'c2',\n//           description: 'c2 description goes here',\n//           createdAt: new Date().toJSON(),\n//           updatedAt: new Date().toJSON(),\n//         },\n//         {\n//           id: '9',\n//           name: 'c3',\n//           description: 'c3 description goes here',\n//           createdAt: new Date().toJSON(),\n//           updatedAt: new Date().toJSON(),\n//         },\n//       ],\n//     },\n//   ],\n//   errorMessage: '',\n// };\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n\n  const middlewares: Middleware[] = [sagaMiddleware];\n\n  if (process.env.NODE_ENV !== 'production') {\n    middlewares.push(createLogger({\n      // diff: true,\n    }));\n  }\n\n  let persistedState = loadState();\n  // if (!persistedState) {\n  //   console.log('mockState');\n  //   persistedState = mockState;\n  // }\n\n  const store = createStore(\n    reducer,\n    persistedState,\n    applyMiddleware(...middlewares)\n  ) as Store<RootState>;\n\n  store.subscribe(throttle(() => {\n    saveState(store.getState());\n  }));\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n};\n\nexport default configureStore;\n","// https://egghead.io/lessons/javascript-redux-persisting-the-state-to-the-local-storage\nimport { LOCAL_STORAGE_STATE_KEY } from './constants';\nimport { RootState } from './reducers';\n\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(LOCAL_STORAGE_STATE_KEY);\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state: RootState) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(LOCAL_STORAGE_STATE_KEY, serializedState);\n  } catch {\n    // ignore write errors\n  }\n};\n"],"sourceRoot":""}